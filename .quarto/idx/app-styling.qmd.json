{"title":"Styling Plots","markdown":{"headingText":"Styling Plots","headingAttr":{"id":"sec-plotstyle","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, include = FALSE}\nknitr::opts_chunk$set(\n  echo = FALSE,\n  warning = FALSE,\n  message = FALSE\n)\nlibrary(ggthemes)\n```\n\n\n## Aesthetics\n\n### Colour/Fill\n\nThe `colour` argument changes the point and line colour, while the `fill` argument changes the interior colour of shapes. Type `colours()` into the console to see a list of all the named colours in R. Alternatively, you can use hexadecimal colours like `\"#FF8000\"` or the `rgb()` function to set red, green, and blue values on a scale from 0 to 1.\n\nHover over a colour to see its R name.\n\n<style>\n  .colordemo { list-item-style: none; padding: 0; margin: 0;}\n  \n  .colordemo li, main ul.colordemo > li:first-child { \n    display: inline-block; \n    border: 0.25px solid black; \n    margin: 0px; \n    padding: 1.3em 0.2em 0.2em 1.2em; \n  }\n  \n  .colordemo li span { \n    display: none; \n    background-color: white; \n    border: 0.25px solid black; \n    padding: 0.25em 0.5em; \n    border-radius: 0 1em 1em 1em;\n  }\n  .colordemo li:hover span { \n    display: inline; \n    position: absolute;\n  }\n</style>\n\n```{r colour-demo, echo = FALSE, results='asis'}\n\nname <- colours(TRUE)\nrgb <- col2rgb(name) \nhsv <- rgb2hsv(rgb)\nhex <- as.hexmode(rgb) %>% as.character() %>% \n  apply(2, paste, collapse = \"\")\n\ncolors <- tibble(name = name,\n       hue = hsv[1, ] %>% round(2),\n       sat = hsv[2, ] %>% round(2),\n       val = hsv[3, ] %>% round(2),\n       hex = hex) %>%\n  arrange(hue, sat, val)\n\nglue::glue(\"    <li style='background-color: #{colors$hex};'><span>{colors$name}</span></li>\") %>%\n  paste(collapse = \"\\n\") %>%\n  paste0(\"\\n<ul class='colordemo'>\\n\", ., \"\\n</ul>\\n\") %>%\n  cat()\n```\n\n### Alpha\n\nThe `alpha` argument changes transparency (0 = totally transparent, 1 = totally opaque). \n\n```{r alpha-demo, echo = FALSE, fig.height = 3, fig.width = 10, fig.cap=\"Varying alpha values.\"}\nalphas <- crossing(alpha = seq(0, 1, .1), y = 0:1)\nggplot(alphas, aes(x = alpha, y = y, alpha = I(alpha), \n                   color = as.factor(y))) +\n  geom_hline(yintercept = 0, size = 5, color = \"dodgerblue\") +\n  geom_hline(yintercept = 1, size = 5, color = \"black\") +\n  geom_point(size = 20, show.legend = FALSE) +\n  scale_x_continuous(\"alpha\", breaks = alphas$alpha) +\n  scale_y_continuous(\"\", breaks = -1:2, limits = c(-1, 2)) +\n  scale_color_manual(values = c(\"black\", \"dodgerblue\")) +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.y = element_blank(),\n        panel.grid.minor = element_blank())\n```\n\n### Shape\n\nThe `shape` argument changes the shape of points. \n\n```{r shape-demo, echo = FALSE, fig.height = 2, fig.width = 10, fig.cap=\"The 25 shape values\"}\nshapes <- tibble(shape = 1:25, y = 0)\nggplot(shapes, aes(x = shape, y = y, shape = I(shape))) +\n  geom_point(size = 8) +\n  scale_x_continuous(\"\", breaks = shapes$shape) +\n  scale_y_continuous(\"\", breaks = 0) +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.y = element_blank(),\n        panel.grid.minor = element_blank())\n```\n\n### Linetype\n\nYou can probably guess what the `linetype` argument does.\n\n\n```{r linetype-demo, echo = FALSE, fig.height = 4, fig.width = 10, fig.cap=\"The 6 linetype values at different sizes.\"}\nlines <- crossing(linetype = 1:6, size = c(0.25, 0.5, 1, 2)) %>% \n  mutate(x = linetype)\nggplot(lines) +\n  geom_vline(aes(xintercept = linetype, \n                 linetype = I(linetype),\n                 size = I(size))) +\n  scale_x_continuous(\"linetype\", breaks = 1:6, \n                     expand = expansion(add = 1)) +\n  facet_wrap(~size, nrow = 1, labeller = label_both) +\n  theme_minimal(base_size = 20) +\n  theme(axis.text.y = element_blank(),\n        panel.grid.minor = element_blank())\n```\n\n## Palettes\n\n```{r, include = FALSE}\npalette_demo <- function(levels, seed = 8675309) {\n  set.seed(seed)\n  \n  dat <- faux::sim_design(\n    within = list(level = 1:levels),\n    between = list(condition= c(\"control\", \"experimental\")),\n    n = 50, dv = \"score\",\n    plot = FALSE, long = TRUE)\n  \n  ggplot(dat, aes(x = level, \n                  y = score, \n                  color = level, \n                  fill = level)) + \n    geom_violin(alpha = 0.8, color = \"black\") +\n    stat_summary(fun = mean) +\n    scale_x_discrete(name = \"\") +\n    guides(color = \"none\", fill = \"none\") +\n     theme(axis.text.y = element_blank(),\n           axis.title.y = element_blank(),\n           axis.ticks.y = element_blank())\n}\n\npalette_plot <- function(g, p) { \n  g + scale_color_brewer(palette = p) +\n    scale_fill_brewer(palette = p) +\n    ggtitle(glue::glue(\"palette = \\\"{p}\\\"\"))\n}\n\nviridis_d_plot <- function(g, option = \"viridis\") { \n  g + scale_color_viridis_d(option = option) +\n    scale_fill_viridis_d(option = option) +\n    ggtitle(glue::glue(\"option = \\\"{option}\\\"\"))\n}\n\n\n```\n\nDiscrete palettes change depending on the number of categories. \n\n```{r, fig.width = 8, fig.height = 10, fig.cap=\"Default discrete palette with different numbers of levels.\"}\nplots <- lapply(1:8, palette_demo)\nwrap_plots(plots, ncol = 2)\n```\n\n\n### Viridis Palettes\n\nViridis palettes are very good for colourblind-safe and greyscale-safe plots. The work with any number of categories, but are best for larger numbers of categories or continuous colours.\n\n#### Discrete Viridis Palettes\n\nSet `r glossary(\"discrete\")` viridis colours with `scale_colour_viridis_d()` or `scale_fill_viridis_d()` and set the `option` argument to one of the options below. Set `direction = -1` to reverse the order of colours.\n\n\n```{r, fig.width = 8, fig.height = 10, fig.cap=\"Discrete viridis palettes.\"}\noptions <- list(\"magma\", \"inferno\", \"plasma\", \"viridis\", \"cividis\")\n\ng <- palette_demo(5)\nplots5 <- lapply(options, viridis_d_plot, g = g)\n\ng <- palette_demo(15)\nplots15 <- lapply(options, viridis_d_plot, g = g)\n\n( wrap_plots(plots5, ncol = 1) | \n  wrap_plots(plots15, ncol = 1)) +\n  plot_layout(widths = c(1, 3))\n```\n\n\n::: {.callout-note}\nIf the end colour is too light for your plot or the start colour too dark, you can set the `begin` and `end` arguments to values between 0 and 1, such as `scale_colour_viridis_c(begin = .1, end = .9)`.\n:::\n\n#### Continuous Viridis Palettes\n\nSet `r glossary(\"continuous\")` viridis colours with `scale_colour_viridis_c()` or `scale_fill_viridis_c()` and set the `option` argument to one of the options below. Set `direction = -1` to reverse the order of colours.\n\n```{r, echo = FALSE, fig.width = 8, fig.height = 8, fig.cap=\"Continuous viridis palettes.\"}\noptions <- list(\"magma\", \"inferno\", \"plasma\", \"viridis\", \"cividis\")\n\nset.seed(8675309)\ng <- faux::rnorm_multi(\n    n = 10000,\n    vars = 2, \n    r = 0.5) %>%\n  ggplot(aes(X1, X2)) + \n  theme(axis.text.y = element_blank(),\n        axis.title.y = element_blank(),\n        axis.ticks.y = element_blank(), \n        axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n# install hexbin if this fails\nviridis_c_plot <- function(g, option, geom = geom_hex) {\n  g + scale_color_viridis_c(option = option) +\n    geom_hex() +\n    scale_fill_viridis_c(option = option) +\n    ggtitle(glue::glue(\"option = \\\"{option}\\\"\"))\n}\n\nhex_plots <- lapply(options, viridis_c_plot, g = g)\nwrap_plots(hex_plots, nrow = 3)\n    \n```\n\n### Brewer Palettes\n\nBrewer palettes give you a lot of control over plot colour and fill. You set them with `scale_color_brewer()` or `scale_fill_brewer()` and set the `palette` argument to one of the palettes below. Set `direction = -1` to reverse the order of colours.\n\n#### Qualitative Brewer Palettes\n\nThese palettes are good for `r glossary(\"categorical\")` data with up to 8 categories (some palettes can handle up to 12). The \"Paired\" palette is useful if your categories are arranged in pairs.\n\n```{r, echo = FALSE, fig.width = 8, fig.height = 8, fig.cap=\"Qualitative brewer palettes.\"}\npalettes <- list(\"Accent\", \"Dark2\", \"Paired\", \"Pastel1\", \"Pastel2\", \"Set1\", \"Set2\", \"Set3\")\n\ng <- palette_demo(12)\nplots <- lapply(palettes, palette_plot, g = g)\nwrap_plots(plots, ncol = 2)\n```\n\n#### Sequential Brewer Palettes\n\nThese palettes are good for up to 9 `r glossary(\"ordinal\")` categories with a lot of categories.\n\n```{r, warning=FALSE, echo = FALSE, fig.width = 8, fig.height = 18, fig.cap=\"Sequential brewer palettes.\"}\npalettes <- c(\"Reds\", \"RdPu\",\n              \"Oranges\", \"OrRd\", \n              \"YlOrRd\", \"YlOrBr\", \"YlGn\", \"YlGnBu\",\n              \"Greens\", \"GnBu\",\n              \"Blues\", \"BuGn\", \"BuPu\", \n              \"Purples\", \"PuRd\", \"PuBu\", \"PuBuGn\",\n              \"Greys\")\n\ng <- palette_demo(9)\nplots <- lapply(palettes, palette_plot, g = g)\nwrap_plots(plots, ncol = 2)\n```\n\n#### Diverging Brewer Palettes\n\nThese palettes are good for `r glossary(\"ordinal\")` categories with up to 11 levels where the centre level is a neutral or baseline category and the levels above and below it differ in an important way, such as agree versus disagree options.\n\n```{r, fig.width = 8, fig.height = 10, fig.cap=\"Diverging brewer palettes.\"}\npalettes <- c(\"BrBG\", \"PiYG\", \"PRGn\", \"PuOr\", \"RdBu\", \"RdGy\", \"RdYlBu\", \"RdYlGn\", \"Spectral\")\n\ng <- palette_demo(11)\nplots <- lapply(palettes, palette_plot, g = g)\nwrap_plots(plots, ncol = 2)\n```\n\n## Themes {#sec-themes-appendix}\n\n<pkg>ggplot2</pkg> has 8 built-in themes that you can add to a plot like `plot + theme_bw()` or set as the default theme at the top of your script like `theme_set(theme_bw())`.\n\n```{r, fig.width = 8, fig.height = 8, fig.cap=\"{ggplot2} themes.\"}\ng <- palette_demo(2) + facet_wrap(~condition)\n\nthemes <- c(\"theme_bw\", \"theme_classic\", \"theme_dark\", \"theme_gray\", \"theme_light\", \"theme_linedraw\", \"theme_minimal\", \"theme_void\")\n\nplots <- lapply(themes, function(f) {\n  g + get(f)() + ggtitle(glue::glue(\"{f}()\"))\n})\nwrap_plots(plots, ncol = 2)\n```\n\n### ggthemes\n\nYou can get more themes from add-on packages, like <pkg>ggthemes\", \"https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/\")`. Most of the themes also have custom `scale_` functions like `scale_colour_economist()`. Their website has extensive examples and instructions for alternate or dark versions of these themes.\n\n```{r, fig.width = 8, fig.height = 18, fig.cap=\"{ggthemes} themes.\"}\ng <- palette_demo(2) + facet_wrap(~condition)\n\nthemes <- c(\"theme_wsj\", \"theme_tufte\", \"theme_stata\", \"theme_gdocs\", \"theme_fivethirtyeight\", \"theme_economist\", \"theme_igray\", \"theme_hc\", \"theme_few\", \"theme_map\", \"theme_excel\", \"theme_calc\", \"theme_economist_white\", \"theme_excel_new\", \"theme_pander\", \"theme_solarized\", \"theme_solarized_2\") %>% sort() %>% setNames(., .)\n\nplots <- lapply(themes, function(f) {\n  scale_colour <- tryCatch({\n    get(gsub(\"theme_\",\"scale_colour_\", gsub(\"_(2|white)\", \"\", f)))()\n  }, error = function(e) {\n    return(NULL)\n  })\n  \n  scale_fill <- tryCatch({\n    get(gsub(\"theme_\",\"scale_fill_\", gsub(\"_(2|white)\", \"\", f)))()\n  }, error = function(e) {\n    return(NULL)\n  })\n  \n  g + get(f)() + \n    ggtitle(glue::glue(\"{f}()\")) + \n    scale_colour + \n    scale_fill\n})\n\nwrap_plots(plots, ncol = 2)\n```\n\n\n### Fonts\n\nYou can customise the fonts used in themes. All computers should be able to recognise the families \"sans\", \"serif\", and \"mono\", and some computers will be able to access other installed fonts by name.\n\n```{r, include = FALSE}\nif (.Platform$OS.type == \"windows\") {\n  windowsFonts(\"Comic Sans MS\" = windowsFont(\"Comic Sans MS\"))\n}\n```\n\n```{r theme-font-demo, echo = TRUE, fig.width = 10, fig.height = 2.5, fig.cap=\"Different fonts.\"}\nsans <- g + theme_bw(base_family = \"sans\") + \n  ggtitle(\"Sans\")\nserif <- g + theme_bw(base_family = \"serif\") + \n  ggtitle(\"Serif\")\nmono <- g + theme_bw(base_family = \"mono\") + \n  ggtitle(\"Mono\")\nfont <- g + theme_bw(base_family = \"Comic Sans MS\") + \n  ggtitle(\"Comic Sans MS\")\n\nsans + serif + mono + font + plot_layout(nrow = 1)\n```\n\n\n::: {.callout-warning}\nIf you are working on a Windows machine and get the error \"font family not found in Windows font database\", you may need to explicitly map the fonts. In your setup code chunk, add the following code, which should fix the error. You may need to do this for any fonts that you specify.\n\n```{r, eval = FALSE}\nwindowsFonts(\"Comic Sans MS\" = windowsFont(\"Comic Sans MS\"))\n```\n:::\n\n\nThe <pkg>showtext</pkg> package is a flexible way to add fonts.\n\nIf you have a .ttf file from a font site, like [Font Squirrel](https://www.fontsquirrel.com){target=\"_blank\"}, you can load the file directly using `font_add()`. Set `regular` as the path to the file for the regular version of the font, and optionally add other versions. Set the `family` to the name you want to use for the font. You will need to include any local font files if you are sharing your script with others.\n\n```{r, echo = TRUE}\nlibrary(showtext)\n\n# font from https://www.fontsquirrel.com/fonts/SF-Cartoonist-Hand\n\nfont_add(\n  regular = \"fonts/cartoonist/SF_Cartoonist_Hand.ttf\",\n  bold = \"fonts/cartoonist/SF_Cartoonist_Hand_Bold.ttf\",\n  italic = \"fonts/cartoonist/SF_Cartoonist_Hand_Italic.ttf\",\n  bolditalic = \"fonts/cartoonist/SF_Cartoonist_Hand_Bold_Italic.ttf\",\n  family = \"cartoonist\" \n)\n```\n\nTo download fonts directly from [Google fonts](https://fonts.google.com/){target=\"_blank\"}, use the function `font_add_google()`, set the `name` to the exact name from the site, and the `family` to the name you want to use for the font.\n\n```{r, echo = TRUE}\n# download fonts from Google\nfont_add_google(name = \"Courgette\", family = \"courgette\")\nfont_add_google(name = \"Poiret One\", family = \"poiret\")\n```\n\nAfter you've added fonts from local files or Google, you need to make them available to R using `showtext_auto()`. You will have to do these steps in each script where you want to use the custom fonts.\n\n```{r, echo = TRUE}\nshowtext_auto() # load the fonts\n```\n\nTo change the fonts used overall in a plot, use the `theme()` function and set `text` to `element_text(family = \"new_font_family\")`.\n\n```{r, echo = TRUE, font-demo, fig.width = 8, fig.height = 2.5, fig.cap=\"Custom Fonts.\"}\na <- g + theme(text = element_text(family = \"courgette\")) +\n  ggtitle(\"Courgette\")\nb <- g + theme(text = element_text(family = \"cartoonist\")) +\n  ggtitle(\"Cartoonist Hand\")\nc <- g + theme(text = element_text(family = \"poiret\")) +\n  ggtitle(\"Poiret One\")\n\na + b + c\n```\n\nTo set the fonts for individual elements in the plot, you need to find the specific argument for that element. You can use the argument `face` to choose \"bold\", \"italic\",  or \"bolditalic\" versions, if they are available.\n\n```{r, echo = TRUE, demo-multi-text, fig.width = 6, fig.height = 2.5, fig.cap=\"Multiple custom fonts on the same plot.\"}\ng + ggtitle(\"Cartoonist Hand\") +\n  theme(\n    title = element_text(family = \"cartoonist\", face = \"bold\"),\n    strip.text = element_text(family = \"cartoonist\", face = \"italic\"),\n    axis.text = element_text(family = \"sans\")\n  )\n```\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["include/healthteachr.css","include/webex.css","include/style.css"],"highlight-style":"a11y","include-after-body":["include/webex.js","include/script.js"],"output-file":"app-styling.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","bibliography":["include/book.bib","include/packages.bib"],"csl":"include/apa.csl","theme":{"light":["flatly","include/light.scss"],"dark":["darkly","include/dark.scss"]},"number-depth":3,"code-copy":"hover"},"extensions":{"book":{"multiFile":true}}}}}