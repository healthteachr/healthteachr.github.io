{
  "hash": "9689c86c6361ae9d09e561704f054816",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Data Visualisation {#sec-viz}\n\n## Intended Learning Outcomes {#sec-ilo-viz .unnumbered}\n\n* Be able to identify categorical versus continuous data\n* Be able to create plots in layers using ggplot\n* Be able to choose appropriate plots for data\n\n## Walkthrough video {#sec-walkthrough-viz .unnumbered}\n\nThere is a walkthrough video of this chapter available via [Echo360](https://echo360.org.uk/media/457312c7-ae4f-4506-8016-a29df4f47462/public). Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.\n\n## Set-up {#sec-setup-viz}\n\nCreate a new project for the work we'll do in this chapter:\n\n-   <if>File > New Project...</if>\n-   Name the project <code class='path'>03-visualisation</code>\n-   Save it inside your ADS directory (**not** inside another project)\n\nThen, create and save a new <a href='https://psyteachr.github.io/glossary/r#r-markdown' target='_blank' class='glossary' title='The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.'>R Markdown</a> document named `plots.Rmd`, get rid of the default template text, and load the packages in the set-up code <a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>chunk</a>. You should have all of these packages installed already, but if you get the message `Error in library(x) : there is no package called ‘x’`, please refer to @sec-install-package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse) # includes ggplot2\nlibrary(patchwork) # for multi-part plots\nlibrary(ggthemes)  # for plot themes\nlibrary(lubridate) # for manipulating dates\n```\n:::\n\n\nWe'd recommend making a new code chunk for each different activity, and using the white space to make notes on any errors you make, things you find interesting, or questions you'd like to ask the course team.\n\nDownload the [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf).\n\n## Variable types\n\nIf a spreadsheet is in a <a href='https://psyteachr.github.io/glossary/t#tidy-data' target='_blank' class='glossary' title='A format for data that maps the meaning onto the structure.'>tidy data</a> format, each row is an <a href='https://psyteachr.github.io/glossary/o#observation' target='_blank' class='glossary' title='All of the data about a single trial or question.'>observation</a>, each column is a <a href='https://psyteachr.github.io/glossary/v#variable' target='_blank' class='glossary' title='(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe'>variable</a>, and the information in each cell is a single <a href='https://psyteachr.github.io/glossary/v#value' target='_blank' class='glossary' title='A single number or piece of data.'>value</a>. We'll learn more about how to get our data into this format in @sec-tidy, but to get started we'll use datasets with the right format.\n\nFor example, the table below lists patients who have recently participated in a rehabilitation programme. Each row is an observation of one patient. There are 6 variables for each patient, their `surname`, `firstname`, `sex`, `birthdate`, `weight` (in kg), and `generalhealth` rating (on a 5-point scale from \"very poor\" to \"very good\").\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|surname  |firstname |sex    |birthdate  | weight|generalhealth |\n|:--------|:---------|:------|:----------|------:|:-------------|\n|Smith    |Katie     |female |1963-04-02 |   71.2|poor          |\n|Wang     |Wei       |female |NA         |   62.9|very good     |\n|González |Rafael    |male   |1946-10-01 |   80.5|fair          |\n|Johnson  |Victor    |male   |1981-06-19 |   65.0|very good     |\n\n</div>\n:::\n:::\n\n\nVariables can be classified as <a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>continuous</a> (numbers) or <a href='https://psyteachr.github.io/glossary/c#categorical' target='_blank' class='glossary' title='Data that can only take certain values, such as types of pet.'>categorical</a> (labels). When you're plotting data, it's important to know what kind of variables you have, which can help you decide what types of plots are most appropriate. Each variable also has a <a href='https://psyteachr.github.io/glossary/d#data-type' target='_blank' class='glossary' title='The kind of data represented by an object.'>data type</a>, such as <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> (numbers), <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> (text), or <a href='https://psyteachr.github.io/glossary/l#logical' target='_blank' class='glossary' title='A data type representing TRUE or FALSE values.'>logical</a> (TRUE/FALSE values). Some plots can only work on some data types. Make sure you have watched the mini-lecture on types of data from last week before you work through this chapter. Additionally, @sec-data-types has more details, as this concept will be relevant repeatedly.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Data types are like the categories when you format cells in Excel.](images/appx/excel-format-cells.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Continuous\n\n<a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>Continuous</a> variables are properties you can measure, like weight. You can use continuous variables in mathematical operations, like calculating the sum total of a column of distances (metres) walked or the average number of goals per football match. They may be rounded to the nearest whole number, but it should make sense to have a measurement halfway between.\n\nContinuous variables always have a <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> data type. They are either <a href='https://psyteachr.github.io/glossary/i#integer' target='_blank' class='glossary' title='A data type representing whole numbers.'>integers</a> like `42` or <a href='https://psyteachr.github.io/glossary/d#double' target='_blank' class='glossary' title='A data type representing a real decimal number'>doubles</a> like `3.14159`. \n\n### Categorical\n\n<a href='https://psyteachr.github.io/glossary/c#categorical' target='_blank' class='glossary' title='Data that can only take certain values, such as types of pet.'>Categorical</a> variables are properties you can count, like blood group. Categorical variables can be <a href='https://psyteachr.github.io/glossary/n#nominal' target='_blank' class='glossary' title='Categorical variables that don't have an inherent order, such as types of animal.'>nominal</a>, where the categories don't really have an order, like blood group O, A, B, and AB, or <a href='https://psyteachr.github.io/glossary/o#ordinal' target='_blank' class='glossary' title='Discrete variables that have an inherent order, such as level of education or dislike/like.'>ordinal</a>, where they have a clear order but the distance between the categories isn't something you could exactly equate, like points on a <a href='https://psyteachr.github.io/glossary/l#likert' target='_blank' class='glossary' title='A rating scale with a small number of discrete points in order'>Likert</a> rating scale. Even if a data table uses numbers like 1-7 to represent ordinal variables, you shouldn't treat them like continuous variables.\n\nCategorical data can have a <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> data type, also called <a href='https://psyteachr.github.io/glossary/s#string' target='_blank' class='glossary' title='A piece of text inside of quotes.'>strings</a>. These are made by putting text inside of quotes. That text can be letters, punctuation, or even numbers. For example, `\"January\"` is a character string, but so is `\"1\"` if you put it in quotes. The character data type is best for variables that can have a lot of different values that you can't predict ahead of time.\n\nCategorical data can also be <a href='https://psyteachr.github.io/glossary/f#factor' target='_blank' class='glossary' title='A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter'>factors</a>, a specific type of integer that lets you specify the category names and their order. This is useful for making plots display with categories in the order you want (otherwise they default to alphabetical order). The factor data type is best for categories that have a specific number of levels.\n\n::: {.callout-caution}\n## Do not factor numbers\n\nIf you factor numeric data, it gets converted to the integers 1 to the number of unique values, no matter what the values are. Additionally, you can no longer use the values as numbers, such as calculating the mean.\n\n\n::: {.cell layout-align=\"center\" filename='Example'}\n\n```{.r .cell-code}\nx <- c(-3, 0, .5)  # numeric vector\nf <- factor(x)     # convert to factor\nx == as.numeric(f) # does not convert back to numeric \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\" filename='You cannot average a factor'}\n\n```{.r .cell-code}\nm <- mean(f)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in mean.default(f): argument is not numeric or logical: returning NA\n```\n\n\n:::\n:::\n\n\n:::\n\nSometimes people represent categorical variables with numbers that correspond to names, like 0 = \"no\" and 1 = \"yes\", but values in between don't have a clear interpretation. If you have control over how the data are recorded, it's better to use the character names for clarity. You'll learn how to recode columns in @sec-wrangle.\n\n### Dates and times\n\nDates and times are a special case of variable. They can act like categorical or continuous variables, and there are special ways to plot them. Dates and times can be hard to work with, but the [<pkg>lubridate</pkg>(https://lubridate.tidyverse.org/) package provides functions to help you with this.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# the current date\nlubridate::today()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-24\"\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# the current date and time in the GMT timezone\nlubridate::now(tzone = \"GMT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-24 20:27:09 GMT\"\n```\n\n\n:::\n:::\n\n\n::: {.callout-note .try}\n## Test your understanding\n\nComing back to the patients dataset, what type of variable is in each column? You can use the function `glimpse()` to show a list of the column names, their data types, and the first few values in each column - here is the output of running `glimpse()` on the patients dataset.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(patients)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 4\nColumns: 6\n$ surname       <chr> \"Smith\", \"Wang\", \"González\", \"Johnson\"\n$ firstname     <chr> \"Katie\", \"Wei\", \"Rafael\", \"Victor\"\n$ sex           <fct> female, female, male, male\n$ birthdate     <date> 1963-04-02, NA, 1946-10-01, 1981-06-19\n$ weight        <dbl> 71.2, 62.9, 80.5, 65.0\n$ generalhealth <fct> poor, very good, fair, very good\n```\n\n\n:::\n:::\n\n\n\n\n| Column          | Variable type | Data type     |\n|:----------------|:--------------|:--------------|\n| `surname`       | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='answer'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `firstname`     | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='answer'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `sex`           | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='answer'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='x'>character</option><option value='answer'>factor</option><option value='x'>date</option></select> |\n| `birthdate`     | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='answer'>date</option></select> | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='answer'>date</option></select> |\n| `weight`        | <select class='webex-select'><option value='blank'></option><option value='answer'>continuous</option><option value='x'>nominal</option><option value='x'>ordinal</option><option value='x'>date</option></select> | <select class='webex-select'><option value='blank'></option><option value='answer'>numeric</option><option value='x'>character</option><option value='x'>factor</option><option value='x'>date</option></select>  |\n| `generalhealth` | <select class='webex-select'><option value='blank'></option><option value='x'>continuous</option><option value='x'>nominal</option><option value='answer'>ordinal</option><option value='x'>date</option></select>  | <select class='webex-select'><option value='blank'></option><option value='x'>numeric</option><option value='x'>character</option><option value='answer'>factor</option><option value='x'>date</option></select> |\n\n:::\n\n\n\n## Building plots\n\nThere are multiple approaches to data visualisation in R; in this course we will use the popular package <pkg>ggplot2</pkg>, which is part of the larger `tidyverse` collection of packages. A grammar of graphics (the \"gg\" in \"ggplot\") is a standardised way to describe the components of a graphic. <pkg>ggplot2</pkg> uses a layered grammar of graphics, in which plots are built up in a series of layers. It may be helpful to think about any picture as having multiple elements that sit semi-transparently over each other. A good analogy is old Disney movies where artists would create a background and then add moveable elements on top of the background via transparencies.\n\n@fig-layers displays the evolution of a simple scatterplot using this layered approach. First, the plot space is built (layer 1); the variables are specified (layer 2); the type of visualisation (known as a `geom`) that is desired for these variables is specified (layer 3) - in this case `geom_point()` is called to visualise individual data points; a second geom is added to include a line of best fit (layer 4), the axis labels are edited for readability (layer 5), and finally, a theme is applied to change the overall appearance of the plot (layer 6).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Evolution of a layered plot](03-viz_files/figure-html/fig-layers-1.png){#fig-layers fig-align='center' width=100%}\n:::\n:::\n\n\nImportantly, each layer is independent and independently customisable. For example, the size, colour and position of each component can be adjusted, or one could, for example, remove the first geom (the data points) to only visualise the line of best fit, simply by removing the layer that draws the data points (@fig-remove-layer). The use of layers makes it easy to build up complex plots step-by-step, and to adapt or extend plots from existing code.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Final plot with scatterplot layer removed.](03-viz_files/figure-html/fig-remove-layer-1.png){#fig-remove-layer fig-align='center' width=100%}\n:::\n:::\n\n\n### Plot Data {#sec-plots-loading-data}\n\nLet's build up the plot above, layer by layer. First we need to get the data. We'll learn how to load data from different sources in @sec-data, but this time we'll use the same method as we did in @sec-loading-online and load it from an online source. \n\nWhen you load the data, `read_csv()` will produce a message that gives you information about the data it has imported and what assumptions it has made. The \"column specification\" tells you what each column is named and what type of data R has categorised each variable as. The abbreviation \"chr\" is for <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> columns, \"dbl\" is for <a href='https://psyteachr.github.io/glossary/d#double' target='_blank' class='glossary' title='A data type representing a real decimal number'>double</a> columns, and \"dttm\" is a date/time column.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfunction_data <- read_csv(\"https://healthteachr.github.io/data/Function_and_PA_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): sex, musculoskeletal, condition_type\ndbl  (6): id, CASP19, gaitspeed, age, steps, generalhealth\ndttm (1): test_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nThis data is simulated data for a health and wellbeing study in older adults. The first thing you should do when you need to plot data is to get familiar with what all of the rows (observations) and columns (variables) mean. Sometimes this is obvious, and sometimes it requires help from the data provider. Here, each row represents one participant.\n\n* `id` is a unique ID for each participant\n* `CASP19` is a quality-of-life score from a 19-item scale\n* `sex` is the biological sex of the participant\n* `gaitspeed` is the participant's gait speed in m/s (from an objective 4-metre walking test)\n* `age` is the participant's age in years\n* `steps` is the number of steps each participant took over a 24-hour period (assessed via an accelerometer)\n* `musculoskeletal` is whether the participant reported being diagnosed with any of the following diseases: osteoarthritis, rheumatoid arthritis, osteoporosis, sarcopenia, or none\n* `condition_type` is the part of the body affected by the musculoskeletal disease: joints (for osteoarthritis/rheumatoid arthritis), bones (for osteoporosis), muscles (for sarcopenia), or none\n* `test_start` is the date and time that the gait speed test started\n* `generalhealth` is a self-reported general health rating on a scale from 1 (very poor) to 5 (very good)\n\nUnless you specify the column types, data importing functions will just guess the types and usually default to double for columns with numbers and character for columns with letters. Use the function `spec()` to find out all of the column types and edit them if needed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nspec(function_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncols(\n  id = col_double(),\n  CASP19 = col_double(),\n  sex = col_character(),\n  gaitspeed = col_double(),\n  age = col_double(),\n  steps = col_double(),\n  musculoskeletal = col_character(),\n  condition_type = col_character(),\n  test_start = col_datetime(format = \"\"),\n  generalhealth = col_double()\n)\n```\n\n\n:::\n:::\n\n\nLet's set `musculoskeletal` and `condition_type` as factors and set the order of the levels. By default, R will order the levels of a factor alphanumerically, however in many cases you will want or need to set your own order. For example, in this data, it makes most sense for the category \"none\" to come at the end of the list for both variables. We will also set `sex` as a factor variable. After you update the column types, you have to re-import the data by adjusting the `read_csv()` code to set the `col_types` argument to the new column types.\n\n::: {.callout-note}\n## Define objects before you use them\n\nBecause `read_csv()` is going to use the object `function_col_types`, you must create `function_col_types` before you run the adjusted `read_csv()` code. If you ever need to adjust your code, try to think about the order that the code will run in if you start from scratch and make sure it's organised appropriately.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# updated column types\nfunction_col_types <- cols(\n  id = col_character(),\n  sex = col_factor(levels = c(\"Male\", \"Female\")),\n  gaitspeed = col_double(),\n  age = col_integer(),\n  steps = col_integer(),\n  musculoskeletal = col_factor(levels = c(\"Osteoarthritis\", \"Rheumatoid arthritis\", \"Osteoporosis\", \"Sarcopenia\", \"None\")),\n  condition_type = col_factor(levels = c(\"Joints\", \"Bones\", \"Muscles\", \"None\")),\n  test_start = col_datetime(format = \"\"),\n  generalhealth = col_integer()\n)\n\n# re-import data with correct column  types\nfunction_data <- read_csv(\"https://healthteachr.github.io/data/Function_and_PA_data.csv\",\n                        col_types = function_col_types)\n```\n:::\n\n\n\n### Plot setup\n\n#### Default theme\n\nPlots in this book use the black-and-white theme, not the default grey theme, so set your default theme to the same so your plots will look like the examples below. At the top of your script, in the setup chunk after you've loaded the tidyverse package, add the following code and run it. You'll learn more ways to customise your theme in @sec-themes and @sec-themes-appendix.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_set(theme_bw()) # set the default theme\n```\n:::\n\n\n#### Data {#sec-plot-setup-data}\n\nEvery plot starts with the `ggplot()` function and a data table. If your data are not loaded or you have a typo in your code, this will give you an error message. It's best to check your plot after each step, so that you can figure out where errors are more easily.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = function_data)\n```\n\n::: {.cell-output-display}\n![A blank ggplot.](03-viz_files/figure-html/fig-build-plot-setup-1.png){#fig-build-plot-setup fig-align='center' width=100%}\n:::\n:::\n\n\n#### Mapping\n\nThe next <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>argument</a> to `ggplot()` is the `mapping`. This tells the plot which columns in the data should be represented by, or \"mapped\" to, different aspects of the plot, such as the x-axis, y-axis, line colour, object fill, or line style. These aspects, or \"aesthetics\", are listed inside the `aes()` function.\n\nSet the arguments `x` and `y` to the names of the columns you want to be plotted on those axes. Here, we want to plot gait speed on the x-axis and steps on the y-axis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# set up the plot with mapping\nggplot(\n  data = function_data, \n  mapping = aes(x = gaitspeed, y = steps)\n)\n```\n\n::: {.cell-output-display}\n![A blank plot with x- and y- axes mapped.](03-viz_files/figure-html/fig-build-plot-mapping-1.png){#fig-build-plot-mapping fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note}\n## ggplot argument names\n\nIn the example above, we wrote out the names of the <a href='https://psyteachr.github.io/glossary/a#argument' target='_blank' class='glossary' title='A variable that provides input to a function.'>arguments</a> `data` and `mapping`, but in practice, almost everyone omits them. Just make sure you put the data and mapping in the right order.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data,  aes(x = gaitspeed, y = steps))\n```\n:::\n\n:::\n\n#### Geoms\n\nNow we can add our plot elements in layers. These are referred to as <a href='https://psyteachr.github.io/glossary/g#geom' target='_blank' class='glossary' title='The geometric style in which data are displayed, such as boxplot, density, or histogram.'>geoms</a> and their functions start with `geom_`. You **add** layers onto the base plot created by `ggplot()` with a plus (`+`). \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point() # scatterplot\n```\n\n::: {.cell-output-display}\n![Adding a scatterplot with geom_point().](03-viz_files/figure-html/fig-build-plot-geoms-1.png){#fig-build-plot-geoms fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n## Location of the +\n\nSomewhat annoyingly, the plus has to be on the end of the previous line, not at the start of the next line. If you do make this mistake, it will run the first line of code to produce the base layer but then you will get the following error message rather than adding on `geom_point()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps))\n```\n\n::: {.cell-output-display}\n![](03-viz_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=100%}\n:::\n\n```{.r .cell-code}\n+ geom_point() # scatterplot\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError:\n! Cannot use `+` with a single argument.\nℹ Did you accidentally put `+` on a new line?\n```\n\n\n:::\n:::\n\n:::\n\n#### Multiple geoms\n\nPart of the power of <pkg>ggplot2</pkg> is that you can add more than one geom to a plot by adding on extra layers and so it quickly becomes possible to make complex and informative visualisation. Importantly, the layers display in the order you set them up. The code below uses the same geoms to produce a scatterplot with a line of best fit, but orders them differently.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Points first\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n\n# Line first\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Points first versus line first.](03-viz_files/figure-html/fig-build-plot-geom2-1.png){#fig-build-plot-geom2 fig-align='center' width=100%}\n:::\n:::\n\n\n#### Saving plots\n\nJust like you can save numbers and data tables to objects, you can also save the output of `ggplot()`. The code below produces the same plots we created above but saves them to objects named `point_first` and `line_first`. If you run just this code, the plots won't display like they have done before. Instead, you'll see the object names appear in the environment pane.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoint_first <- \n  ggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n  \nline_first <-\n  ggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n```\n:::\n\n\nTo view the plots, call the objects by name. This will output each plot separately.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoint_first # view first plot\nline_first # view second plot\n```\n:::\n\n\n#### Combining plots\n\nOne of the reasons to save your plots to objects is so that you can combine multiple plots using functions from the `patchwork` package. The below code produces the above plot by combining the two plots with `+` and then specifying that we want the plots produced on a single row with the `nrow` argument in `plot_layout()`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# add plots together in 1 row\npoint_first + line_first + plot_layout(nrow = 1)\n```\n\n::: {.cell-output-display}\n![Combining plots with patchwork.](03-viz_files/figure-html/fig-build-plot-geom2b-1.png){#fig-build-plot-geom2b fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note .try}\n## Try changing nrow to 2\n:::\n\n\n### Customising plots\n\nThere are nearly endless ways to customise ggplots. We'll cover a few of the basic customisations here.\n\n#### Styling geoms\n\nWe should definitely put the line in front of the points, but the points are still a bit dark. If you want to change the overall style of a geom, you can set the arguments `colour`, `alpha`, `shape`, `size` and `linetype` inside the geom function. There are many different values that you can set these to; @sec-plotstyle) gives details of these. Play around with different values below and figure out what the <a href='https://psyteachr.github.io/glossary/d#default-value' target='_blank' class='glossary' title='A value that a function uses for an argument if it is skipped.'>default values</a> are for `shape` and `size`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2, # 20% transparency\n             shape = 18,  # solid diamond\n             size = 2) + \n  geom_smooth(method = lm, \n              formula = y~x, # formula used to draw line, \n              # setting method & formula avoids an annoying message\n              colour = rgb(0, .5, .8),\n              linetype = 3) \n```\n\n::: {.cell-output-display}\n![Changing geom styles.](03-viz_files/figure-html/fig-build-plot-style-1.png){#fig-build-plot-style fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-warning}\n## Setting aesthetics overall versus by category\n\nThis method is only for changing the style of *all* the shapes made with that geom. If you want, for example, points to have different colours depending on the type of musculoskeletal disease, you set the argument `colour = musculoskeletal` inside the `aes()` function for the mapping. You can customise the colours used with `scale_` functions, which you will learn about below and in @sec-plotstyle).\n:::\n\n#### Format axes\n\nNow we need to make the axes look neater. There are several functions you can use to change the axis labels, but the most powerful ones are the `scale_` functions. You need to use a scale function that matches the data you're plotting on that axis and this is where it becomes particularly important to know what type of data you're working with. Both of the axes here are <a href='https://psyteachr.github.io/glossary/c#continuous' target='_blank' class='glossary' title='Data that can take on any values between other existing values.'>continuous</a>, so we'll use `scale_x_continuous()` and `scale_y_continuous()`.\n\nThe `name` argument changes the axis label. The `breaks` argument sets the major units and needs a <a href='https://psyteachr.github.io/glossary/v#vector' target='_blank' class='glossary' title='A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.'>vector</a> of possible values, which can extend beyond the range of the data (e.g., `gaitspeed` only goes up to 1.297, but we can specify breaks up to 1.4 to make the maths easier or anticipate updates to the data). The `seq()` function creates a sequence of numbers `from` one `to` another `by` specified steps.\n\n\n::: {.cell layout-align=\"center\" filename='Example of seq()'}\n\n```{.r .cell-code}\nseq(from = 0.0, to = 1.4, by = 0.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0 0.2 0.4 0.6 0.8 1.0 1.2 1.4\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  # customise axis labels and breaks\n  scale_x_continuous(name = \"Gait speed (m/s)\", \n                     breaks = seq(from = 0.0, to = 1.4, by = 0.2)) +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(from = 0, to = 10000, by = 2500))\n```\n\n::: {.cell-output-display}\n![Formatting plot axes with scale_ functions.](03-viz_files/figure-html/fig-build-plot-axes-1.png){#fig-build-plot-axes fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note .try}\n## Minor breaks\n\nCheck the help for `?scale_x_continuous` to see how you would set the minor units or specify how many breaks you want instead.\n:::\n\n\n#### Axis limits\n\nIf you want to change the minimum and maximum values on an axis, use the `coord_cartesian()` function. Many plots make more sense if the minimum and maximum values represent the range of possible values, even if those values aren't present in the data. Here, gait speed and number of steps can't be less than 0, so we'll set the minimum values to 0 and the maximum values to the first break above the highest value.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Gait speed (m/s)\", \n                     breaks = seq(from = 0.0, to = 1.4, by = 0.2)) +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(from = 0, to = 10000, by = 2500)) +\n  # set axis limits\n  coord_cartesian(xlim = c(0.0, 1.4), \n                  ylim = c(0, 10000))\n```\n\n::: {.cell-output-display}\n![Changing the axis limits.](03-viz_files/figure-html/fig-build-plot-limits-1.png){#fig-build-plot-limits fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-caution}\n## Setting limits with the scale_ function\n\nYou can also set the `limits` argument inside  the `scale_` functions, but this actually removes any data that falls outside these limits, rather than cropping your plot, and this can change the appearance of certain types of plots like violin plots and density plots.\n:::\n\n#### Themes {#sec-themes}\n\n<pkg>ggplot2</pkg> comes with several built-in themes, such as `theme_minimal()` and `theme_bw()`, but the [<pkg>ggthemes</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) package provides even more themes to match different software, such as GoogleDocs or Stata, or publications, such as the Economist or the Wall Street Journal. Let's add the GoogleDocs theme, but change the font size to 20 with the `base_size` argument.\n\nIt's also worth highlighting that this code is starting to look quite complicated because of the number of layers, but because we've built it up slowly it should (hopefully!) make sense. If you see examples of <pkg>ggplot2</pkg> code online that you'd like to adapt, build the plot up layer by layer and it will make it easier to understand what each layer adds.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Gait speed (m/s)\", \n                     breaks = seq(from = 0.0, to = 1.4, by = 0.2)) +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(from = 0, to = 10000, by = 2500)) +\n  coord_cartesian(xlim = c(0.0, 1.4), \n                  ylim = c(0, 10000)) +\n  # change the theme\n  ggthemes::theme_gdocs(base_size = 20)\n```\n\n::: {.cell-output-display}\n![Changing the theme to the Google Docs style.](03-viz_files/figure-html/fig-build-plot-theme-1.png){#fig-build-plot-theme fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n#### Theme tweaks\n\nIf you're still not quite happy with a theme, you can customise it even further with the `themes()` function. Check the help for this function to see all of the possible options. The most common thing you'll want to do is to remove an element entirely. You do this by setting the relevant argument to `element_blank()`. Below, we're getting rid of the x-axis line and the plot background, which removes the line around the plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Gait speed (m/s)\", \n                     breaks = seq(from = 0.0, to = 1.4, by = 0.2)) +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(from = 0, to = 10000, by = 2500)) +\n  coord_cartesian(xlim = c(0.0, 1.4), \n                  ylim = c(0, 10000)) +\n  theme_gdocs(base_size = 11) +\n  # customise theme elements\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())\n```\n\n::: {.cell-output-display}\n![Customising the theme to remove the x-axis line and background outline.](03-viz_files/figure-html/fig-build-plot-custom-theme-1.png){#fig-build-plot-custom-theme fig-align='center' width=100%}\n:::\n:::\n\n\n### Figure captions {#sec-captions}\n\nYou can add a caption directly to the image using the `labs()` function, which also allows you to add or edit the title, subtitle, and axis labels.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Gait speed (m/s)\", \n                     breaks = seq(from = 0.0, to = 1.4, by = 0.2)) +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(from = 0, to = 10000, by = 2500)) +\n  coord_cartesian(xlim = c(0.0, 1.4), \n                  ylim = c(0, 10000)) +\n  theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank()) +\n  labs(title = \"Association of gait speed with physical activity\",\n       subtitle = \"2020 Healthy Ageing Data\",\n       caption = \"Figure 1. As gait speed increases, number of steps increases.\")\n```\n\n::: {.cell-output-display}\n![Adding a title, subtitle, and caption.](03-viz_files/figure-html/fig-caption-1.png){#fig-caption fig-align='center' width=100%}\n:::\n:::\n\n\nHowever, it is more accessible to include this sort of information in plain text for screen readers. You can add a text caption in the chunk header, and some document types will even automatically number figures for you (you'll learn about this in @sec-linked-docs). You can also add alt-text descriptions for screen readers that describe the image.\n\n\n::: {.cell layout-align=\"center\" verbatim='r fig-gait-vs-steps, fig.cap=\"As gait speed increases, number of steps increases.\", fig.alt=\"A scatterplot showing gait speed on the x-axis (range 0.0-1.3 m/s) and number of steps on the y-axis (range 0-9829 steps) with a trend line showing that as gait speed increases, number of steps increases from about 0.6m/s gait speed/2400 steps to about 1.2m/s gait speed/7400 steps.\"'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r fig-gait-vs-steps, fig.cap=\"As gait speed increases, number of steps increases.\", fig.alt=\"A scatterplot showing gait speed on the x-axis (range 0.0-1.3 m/s) and number of steps on the y-axis (range 0-9829 steps) with a trend line showing that as gait speed increases, number of steps increases from about 0.6m/s gait speed/2400 steps to about 1.2m/s gait speed/7400 steps.\"}</code></pre>\n\n```{.r .cell-code}\n# figure code here\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n\n## Appropriate plots\n\nNow that you know how to build up a plot by layers and customise its appearance, you're ready to learn about some more plot types. Different types of data require different types of plots, so this section is organised by data type. \n\nThe [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf) is a great resource to help you find plots appropriate to your data, based on how many variables you're plotting and what type they are. The examples below all use the same health and wellbeing data, but each plot communicates something different. \n\nWe don't expect you to memorise all of the plot types or the methods for customising them, but it will be helpful to try out the code in the examples below for yourself, changing values to test your understanding.\n\n### Counting categories\n\n#### Bar plot\n\nIf you want to count the number of things per category, you can use `geom_bar()`. You only need to provide a `x` mapping to `geom_bar()` because by default `geom_bar()` uses the number of observations in each group of `x` as the value for `y`, so you don't need to tell it what to put on the y-axis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = condition_type)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![A basic bar plot.](03-viz_files/figure-html/fig-bar-1.png){#fig-bar fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note .try}\n## Customising bar plot appearance\n\nYou probably want to customise some things, like the colours, order of the columns, and their labels. Inspect the code below and try running it layer by layer to figure out where these things change. The functions `scale_fill_manual()` and `scale_x_discrete()` are new, but work in the same way as the other `scale_` functions. You'll learn more about this in @sec-custom-viz.\n\n\n::: {.cell layout-align=\"center\" webex.hide='Code'}\n::: {.callout-note collapse='true'}\n## Code\n\n```{.r .cell-code}\nggplot(function_data, aes(x = condition_type, \n                        fill = condition_type)) +\n  geom_bar() +\n  scale_x_discrete(\n    # change axis title\n    name = \"Type of condition\", \n    # change order\n    limits = c(\"Joints\", \"Bones\", \"Muscles\", \"None\"), \n    # change labels\n    labels = c(\"Joints\", \"Bones\", \"Muscles\", \"None\") \n  ) +\n  scale_fill_manual(\n    # change colours\n    values = c(Joints = \"goldenrod\", \n               Bones = \"darkgreen\", \n               Muscles = \"dodgerblue3\", \n               None = \"purple3\"),\n    # remove the legend\n    guide = \"none\" \n  ) +\n  scale_y_continuous(\n    name = \"\", # remove axis title\n    # remove the space above and below the y-axis\n    expand = expansion(add = 0)\n  ) +\n  # minimum = 0, maximum = 65\n  coord_cartesian(ylim = c(0, 65)) + \n  ggtitle(\"Number of participants with each type of musculoskeletal condition\") # add a title\n```\n\n::: {.cell-output-display}\n![](03-viz_files/figure-html/custom-bar-1.png){fig-align='center' width=100%}\n:::\n\n:::\n:::\n\n:::\n\n#### Column plot\n\nIf your data already have a column with the number you want to plot, you can use `geom_col()` to plot it. We can use the `count()` function to make a table with a row for each `condition_type` and a column called `n` with the number of observations in that category.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfunction_count_data <- count(function_data, condition_type)\nfunction_count_data\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|condition_type |  n|\n|:--------------|--:|\n|Joints         | 47|\n|Bones          | 12|\n|Muscles        |  6|\n|None           | 35|\n\n</div>\n:::\n:::\n\n\n\n\n|condition_type |  n|\n|:--------------|--:|\n|Joints         | 47|\n|Bones          | 12|\n|Muscles        |  6|\n|None           | 35|\n\n\n\nThe mapping for `geom_col()` requires you to set both the `x` and `y` aesthetics. Set `y = n` because we want to plot the number of musculoskeletal diseases per condition type, and that information is in the column called `n`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_count_data, aes(x = condition_type, y = n)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![A basic column plot.](03-viz_files/figure-html/fig-col-1.png){#fig-col fig-align='center' width=100%}\n:::\n:::\n\n\n\n#### Pie chart\n\nPie charts are a [misleading form of data visualisation](https://www.data-to-viz.com/caveat/pie.html){target=\"_blank\"}, so we won't cover them. We'll cover options for visualising proportions, like waffle, lollipop and treemap plots, in @sec-other-plots.\n\n::: {.callout-note .try}\n## Test your understanding\n\n\n\n\n\n\nHere is a small data table.\n\ncountry             | population      | island\n:-------------------|----------------:|:--------------\nNorthern Ireland    | 1,895,510       | Ireland\nWales               | 3,169,586       | Great Britain\nRepublic of Ireland | 4,937,786       | Ireland\nScotland            | 5,466,000       | Great Britain\nEngland             | 56,550,138      | Great Britain\n\n\n* What geom would you use to plot the population for each of the 5 countries? <select class='webex-select'><option value='blank'></option><option value='x'>geom_bar</option><option value='answer'>geom_col</option></select>\n\n::: {.cell layout-align=\"center\"}\n* What mapping would you use?  <div class='webex-radiogroup' id='radio_SZRFKASMOK'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_SZRFKASMOK\" value=\"answer\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_SZRFKASMOK\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_SZRFKASMOK\" value=\"x\"></input> <span>aes(x = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_SZRFKASMOK\" value=\"x\"></input> <span>aes(x = island)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_SZRFKASMOK\" value=\"x\"></input> <span>aes(y = population)</span></label></div>\n:::\n\n* What geom would you use to plot the number of countries on each island? <select class='webex-select'><option value='blank'></option><option value='answer'>geom_bar</option><option value='x'>geom_col</option></select>\n\n::: {.cell layout-align=\"center\"}\n* What mapping would you use?  <div class='webex-radiogroup' id='radio_URVKDOMDOX'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_URVKDOMDOX\" value=\"x\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_URVKDOMDOX\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_URVKDOMDOX\" value=\"x\"></input> <span>aes(x = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_URVKDOMDOX\" value=\"answer\"></input> <span>aes(x = island)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_URVKDOMDOX\" value=\"x\"></input> <span>aes(y = population)</span></label></div>\n:::\n\n:::\n\n### One continuous variable {#sec-histogram}\n\nIf you have a continuous variable, like number of steps, you can use `geom_histogram()` to show the distribution. Just like `geom_bar()` you are only required to specify the `x` variable. \n\nA histogram splits the data into \"bins\" along the x-axis and shows the count of how many observations are in each bin along the y-axis.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = steps)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Histogram of steps.](03-viz_files/figure-html/fig-histogram-1.png){#fig-histogram fig-align='center' width=100%}\n:::\n:::\n\n\nYou should always set the `binwidth` or number of `bins` to something meaningful for your data (otherwise you get the annoying message above). You might need to try a few options before you find something that looks good and conveys the meaning of your plot -- try changing the values of `binwidth` and `bins` below to see what works best.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# adjust width of each bar\nggplot(function_data, aes(x = steps)) +\n  geom_histogram(binwidth = 500)\n\n# adjust number of bars\nggplot(function_data, aes(x = steps)) +\n  geom_histogram(bins = 5)\n```\n:::\n\n\n\nBy default, the bars start *centered* on 0, so if `binwidth` is set to 500, the first bar would include -250 to 250 steps, which doesn't make much sense. We can set `boundary = 0` so that each bar represents increments of 500 steps *starting* from 0. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = steps)) +\n  geom_histogram(binwidth = 500, boundary = 0)\n```\n\n::: {.cell-output-display}\n![A histogram with the boundary set to 0.](03-viz_files/figure-html/fig-histogram-boundary0-1.png){#fig-histogram-boundary0 fig-align='center' width=100%}\n:::\n:::\n\n\n\nFinally, the default style of grey bars is ugly, so you can change that by setting the `fill` and `colour`, as well as using `scale_x_continuous()` to update the axis labels. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = steps)) +\n  geom_histogram(binwidth = 250, \n                 boundary = 0, \n                 fill = \"white\", \n                 color = \"black\") +\n  scale_x_continuous(name = \"Number of steps\",\n                     breaks = seq(0, 10000, 2500))\n```\n\n::: {.cell-output-display}\n![Histogram with custom styles.](03-viz_files/figure-html/fig-histogram-custom-1.png){#fig-histogram-custom fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note .try}\n## Test your understanding\n\nImagine you have a table of the [population for each country in the world](https://population.un.org/wpp/Download/Standard/Population/){target=\"_blank\"} with the columns `country` and `population`. We'll just look at the 76 countries with populations of less than a million.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-viz_files/figure-html/test-one-continuous-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n* How would you set the mapping for this plot?  <div class='webex-radiogroup' id='radio_GVJWWWYYQH'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GVJWWWYYQH\" value=\"x\"></input> <span>aes(x = country, y = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GVJWWWYYQH\" value=\"x\"></input> <span>aes(x = population, y = country)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GVJWWWYYQH\" value=\"answer\"></input> <span>aes(x = population)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GVJWWWYYQH\" value=\"x\"></input> <span>aes(x = population, y = count)</span></label></div>\n:::\n\n* What is the `binwidth` of the histogram? <select class='webex-select'><option value='blank'></option><option value=''>1</option><option value=''>100</option><option value='answer'>100K</option><option value=''>1M</option></select>\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Axis label customisation\n\nIf you're curious how we got the x-axis labels to read \"100K\" instead of \"100000\", you just need to add a vector of `labels` the same length as `breaks`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n  scale_x_continuous(breaks = seq(0, 1e6, 1e5),\n                     labels = c(paste0(0:9*100, \"K\"), \"1M\"))\n```\n:::\n\n:::\n\n### Grouped continuous variables\n\nThere are several ways to compare continuous data across groups. Which you choose depends on what point you are trying to make with the plot.\n\n#### Stacked histogram\n\nIn previous plots, we have used `fill` purely for visual reasons, e.g., we changed the colour of the histogram bars to make them look nicer. However, you can also use `fill` to represent another variable so that the colours become meaningful. \n\nSetting the `fill` aesthetic **in the mapping** will produce different coloured bars for each category of the `fill` variable, in this case `condition_type`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = steps, fill = condition_type)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 250,\n                 color = \"black\")\n```\n\n::: {.cell-output-display}\n![Histogram with categories represented by fill.](03-viz_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.callout-warning}\n## Arguments inside aes()\n\nWhen you set an aspect to represent the data, you do this inside the `aes()` function for the mapping, not as an argument to the geom. If you try to set this in a geom, you'll get the following error (unless you coincidentally have an object named `condition_type` that is a colour word).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = steps)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 250, \n                 color = \"black\",\n                 fill = condition_type)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'condition_type' not found\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Area plot alternative\n\nThe function `geom_area()` gives a similar effect when `stat = \"bin\"`. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# area plot\nggplot(function_data, mapping = aes(x = steps, fill = condition_type)) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 250, \n            color = \"black\")\n```\n\n::: {.cell-output-display}\n![Stacked area plot.](03-viz_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n#### Dodged histogram\n\nBy default, the categories are positioned stacked on top of each other. If you want to compare more than one distribution, you can set the `position` argument of `geom_histogram()` to \"dodge\" to put the bars for each group next to each other instead of stacking them. However, this can look confusing with several categories. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# dodged histogram\nggplot(function_data, aes(x = steps, \n                        fill = condition_type,\n                        colour = condition_type))+\n  geom_histogram(boundary = 0, \n                 binwidth = 250, \n                 position = \"dodge\") +\n  scale_x_continuous(name = \"Number of steps\",\n                     breaks = seq(0, 10000, 2500))\n```\n\n::: {.cell-output-display}\n![A histogram with multiple groups.](03-viz_files/figure-html/fig-histogram-dodge-1.png){#fig-histogram-dodge fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.callout-tip collapse=\"true\"}\n## Frequency plot alternative\n\nAlternatively, you can use `geom_freqpoly()` to plot a line connecting the top of each bin (see @sec-freqpoly).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# frequency plot\nggplot(function_data, aes(x = steps,\n                        colour = condition_type)) +\n  geom_freqpoly(binwidth = 250, \n                boundary = 0,\n                size = 1) +\n  scale_x_continuous(name = \"Number of steps\",\n                     breaks = seq(0, 10000, 2500))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![A frequency plot with multiple groups.](03-viz_files/figure-html/fig-groups-freqpoly-1.png){#fig-groups-freqpoly fig-align='center' width=100%}\n:::\n:::\n\n\n:::\n\n#### Violin plot\n\nAnother way to compare groups of continuous variables is the violin plot. This is like a density plot, but rotated 90 degrees and mirrored - the fatter the violin, the larger proportion of data points there are at that value.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nviolin_area <- \n  ggplot(function_data, aes(x = condition_type, y = steps)) +\n  geom_violin() +\n  ggtitle('scale = \"area\"')\n\nviolin_count <- \n  ggplot(function_data, aes(x = condition_type, y = steps)) +\n  geom_violin(scale = \"count\") +\n  ggtitle('scale = \"count\"')\n\nviolin_area + violin_count\n```\n\n::: {.cell-output-display}\n![The default violin plot gives each shape the same area. Set scale='count' to make the size proportional to the number of observations.](03-viz_files/figure-html/fig-violin-plot-1.png){#fig-violin-plot fig-align='center' width=100%}\n:::\n:::\n\n\n#### Boxplot\n\nBoxplots serve a similar purpose to violin plots (without the giggles from the back row). They don't show you the shape of the distribution, but rather some statistics about it. The middle line represents the <a href='https://psyteachr.github.io/glossary/m#median' target='_blank' class='glossary' title='The middle number in a distribution where half of the values are larger and half are smaller.'>median</a>; half the data are above this line and half below it. The box encloses the 25th to 75th percentiles of the data, so 50% of the data falls inside the box. The \"whiskers\" extending above and below the box extend 1.5 times the height of the box, although you can change this with the `coef` argument. The points show <a href='https://psyteachr.github.io/glossary/o#outlier' target='_blank' class='glossary' title='A data point that is extremely distant from most of the other data points'>outliers</a> -- individual data points that fall outside of this range.\n\nBoxplots can be horizontal if you swap to x and y columns, and there are many other customisations you can apply.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nboxplot <- ggplot(function_data, aes(x = condition_type, y = steps)) +\n geom_boxplot() +\n  ggtitle(\"Default vertical boxplot\")\n\ncustom <- ggplot(function_data, aes(y = condition_type,x = steps)) +\n geom_boxplot(fill = \"grey80\", \n              outlier.colour = \"red\",\n              outlier.shape = 8,\n              coef = 1,   # length of whiskers relative to box\n              varwidth = TRUE, # set width proportional to sample size\n              notch = FALSE) +\n  ggtitle(\"Customised horizontal boxplot\")\n\nboxplot + custom\n```\n\n::: {.cell-output-display}\n![Boxplots.](03-viz_files/figure-html/fig-box-plot-1.png){#fig-box-plot fig-align='center' width=100%}\n:::\n:::\n\n\n\n#### Combo plots\n\nViolin plots are frequently layered with other geoms that represent the mean or median values in the data. This is a lot of code; to help your understanding,  run it layer by layer to see how it builds up and change the values throughout the code.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# add fill and colour to the mapping\n\nggplot(function_data,  aes(x = condition_type, \n                         y = steps,\n                         fill = condition_type,\n                         colour = condition_type)) +\n  scale_x_discrete(name = \"Type of condition\") +\n  scale_y_continuous(name = \"Number of steps\",\n                     breaks = seq(0, 10000, 2500)) +\n  coord_cartesian(ylim = c(0, 10000)) +\n  guides(fill = \"none\", colour = \"none\") + \n  # add a violin plot\n  geom_violin(draw_quantiles = 0.5, # adds a line at median (50%) score\n              alpha = 0.4) + \n  # add a boxplot\n  geom_boxplot(width = 0.25, \n               fill = \"white\", \n               alpha = 0.75, \n               fatten = 0, # removes the median line\n               outlier.alpha = 0) + \n  # add a point that represents the mean\n  stat_summary(fun = mean, \n               geom = \"point\", \n               size = 2) + \n  ggtitle(\"ViolinBox\")\n```\n\n::: {.cell-output-display}\n![Violin plots combined with different methods to represent means and medians.](03-viz_files/figure-html/fig-violin-combos-1.png){#fig-violin-combos fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-caution collapse=\"true\"}\n## Misleading Bar Charts\n\nA very common type of plot is to produce a bar chart of means, however, the example below demonstrates just how misleading this is. It communicates the mean value for each category, but the bars hide the distribution of the actual data. You can't tell if most gait speeds among participants with a musculoskeletal disease are close to 0.8 m/s, or spread from 0 to 1.4 m/s, or if the vast majority are less than 0.7 m/s, but the mean is pulled up by some very high outliers.\n\nColumn plots can also be very misleading. The plot on the left starts the y-axis at 0, which makes the bar heights proportional, showing almost no difference in average gait speeds among participants with a musculoskeletal disease. Since the differences are hard to see, you may be tempted to start the y-axis higher, but that makes it look like the average gait speed for people with muscular conditions is double that for people with bone conditions.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Don't plot continuous data with column plots. They are only appropriate for count data.](03-viz_files/figure-html/fig-col-plot-bad-1.png){#fig-col-plot-bad fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n\n::: {.callout-note .try}\n## Test your understanding\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-viz_files/figure-html/test-grouped-continuous-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n* How would you create plot A? <select class='webex-select'><option value='blank'></option><option value='x'>geom_box()</option><option value='x'>geom_boxplot()</option><option value='answer'>geom_violin()</option><option value='x'>geom_violinplot()</option></select>\n* How would you create plot B? <select class='webex-select'><option value='blank'></option><option value='x'>geom_box()</option><option value='answer'>geom_boxplot()</option><option value='x'>geom_violin()</option><option value='x'>geom_violinplot()</option></select>\n* What does the mapping look like for both plots? <div class='webex-radiogroup' id='radio_MVFPRSOCTO'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_MVFPRSOCTO\" value=\"x\"></input> <span>aes(x = musculoskeletal, y = gaitspeed, colour = musculoskeletal)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_MVFPRSOCTO\" value=\"answer\"></input> <span>aes(x = musculoskeletal, y = gaitspeed, fill = musculoskeletal)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_MVFPRSOCTO\" value=\"x\"></input> <span>aes(x = musculoskeletal, y = gaitspeed, colour = gaitspeed)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_MVFPRSOCTO\" value=\"x\"></input> <span>aes(x = musculoskeletal, y = gaitspeed, fill = gaitspeed)</span></label></div>\n\n* Which category is characterised by the slowest median gait speed? <select class='webex-select'><option value='blank'></option><option value='x'>Sarcopenia</option><option value='x'>None</option><option value='answer'>Osteoporosis</option><option value='x'>Rheumatoid arthritis</option><option value='x'>Osteoarthritis</option></select>\n* Which category is characterised by the quickest median gait speed? <select class='webex-select'><option value='blank'></option><option value='x'>Osteoarthritis</option><option value='answer'>None</option><option value='x'>Rheumatoid arthritis</option><option value='x'>Osteoporosis</option><option value='x'>Sarcopenia</option></select>\n:::\n\n\n### Two continuous variables\n\nWhen you want to see how two continuous variables are related, set one as the x-axis and the other as the y-axis. Usually, if one variable causes the other, you plot the cause on the x-axis and the effect on the y-axis. Here, we want to see if quicker gait speeds (better physical function) cause the number of steps walked in a 24-hour period to be higher (more physical activity). \n\n#### Scatterplot\n\nThe function to create a scatterplot is called `geom_point()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![Scatterplot with geom_point().](03-viz_files/figure-html/fig-demo-point-1.png){#fig-demo-point fig-align='center' width=100%}\n:::\n:::\n\n\n#### Trendlines\n\nIn @fig-layers, we emphasised the relationship between gait speed and number of steps with a trendline created by `geom_smooth()` using the argument `method = lm` (\"lm\" stands for \"linear model\" or a straight line relationship). You can also set `method = loess` to visualise a non-linear relationship.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_plot <- \n  ggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"method = lm\")\n\nloess_plot <- \n  ggplot(function_data, aes(x = gaitspeed, y = steps)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = loess, formula = y~x) +\n  ggtitle(\"method = loess\")\n\nlm_plot + loess_plot\n```\n\n::: {.cell-output-display}\n![Different ways to show the relationship between two continuous variables.](03-viz_files/figure-html/fig-2-continuous-1.png){#fig-2-continuous fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-warning}\n## Error shading\n\nIf there isn't much data at the extremes of the x-axis, the curve can be very uncertain. This is represented by the wider shaded area, which means that the true relationship might be anywhere within that area. Add the argument `se = FALSE` to `geom_smooth()` to remove this \"standard error\" shading.\n:::\n\n\n#### Dates\n\nThe `test_start` column contains both a date and a time, so use the `date()` function from <pkg>lubridate</pkg> to convert it to just a date. We'll need it in this format to be able to transform the x-axis below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = lubridate::date(test_start), \n                        y = CASP19)) + \n  geom_smooth(method = lm, formula = y~x)\n```\n\n::: {.cell-output-display}\n![Plotting dates.](03-viz_files/figure-html/fig-date-x-1.png){#fig-date-x fig-align='center' width=100%}\n:::\n:::\n\n\nWe can use `scale_x_date()` to set the `date_breaks` to be \"1 month\" apart. The `date_labels` argument uses a code for different date formats; you can see the full list of possibilities in the help for `?strptime`. For example, `%b` means \"Abbreviated month name\", whilst if you wanted to use a format like \"2020/01/31\" you could try `\"%Y/%m/%d\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = lubridate::date(test_start), \n                        y = CASP19)) +\n  geom_smooth(method = lm, formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Quality-of-life\") +\n  ggtitle(\"2020 Quality-of-life\")\n```\n\n::: {.cell-output-display}\n![Plotting dates with breaks one month apart.](03-viz_files/figure-html/fig-date-month-1.png){#fig-date-month fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note .try}\n## Test yourself\n\nIt looks like quality-of-life scores declined across the year (`test_start` represents the day of data collection here, but can be used as a proxy to investigate seasonal differences in quality-of-life), but is this change meaningful? See what the plot looks like when the y-axis spans the full range of possible quality-of-life values from 0 to 57. You can also plot the individual data points to emphasise the range of values. \n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nggplot(function_data, aes(x = lubridate::date(test_start), \n                        y = CASP19)) +\n  # show individual data, jitter the height to avoid overlap\n  geom_jitter(width = 0, height = .1, alpha = 0.2) + \n  geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Quality-of-life\",\n                     breaks = seq(0, 57, 10)) +\n  coord_cartesian(ylim = c(0, 57)) + # changes limits\n  ggtitle(\"2020 Quality-of-life\")\n```\n\n::: {.cell-output-display}\n![](03-viz_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=100%}\n:::\n\n:::\n:::\n\n\n:::\n\n\n### Overplotting\n\nWhen you have a limited range of numeric values, such as an ordinal rating scale, sometimes overlapping data makes it difficult to see what is going on in a point plot. For example, the plot below shows general health ratings by gait speed, but because all the ratings are 1, 2, 3, 4 or 5, it makes it hard to see exactly how many data points there are at each point.\n\nIn this section, we'll explore a few options for dealing with this.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = generalhealth)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![Overlapping data makes plots hard to understand.](03-viz_files/figure-html/fig-over-plot-1.png){#fig-over-plot fig-align='center' width=100%}\n:::\n:::\n\n\n#### Jitter plot\n\nYou can use `geom_jitter()` to move the points around a bit to make them easier to see. You can also set alpha transparency. Here, the x-axis is continuous, so there is no need to jitter the `width`, but the y-axis is ordinal categories, so the `height` is jittered between -0.2 and +0.2 away from the true y-value. \n\n::: {.callout-note .try}\n## Change these values to understand what jitter is doing\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed, y = generalhealth)) +\n  geom_jitter(width = 0, height = .2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![Jitter plot.](03-viz_files/figure-html/fig-jitter-plot-1.png){#fig-jitter-plot fig-align='center' width=100%}\n:::\n:::\n\n\n#### Facets\n\nAlternatively, you can use `facet_wrap()` to create a separate plot for each level of general health. `facet_wrap()` uses the tilde (~) symbol, which you can roughly translate as \"by\", e.g., facet the plot *by* general health rating. The `labeller` function controls the labels above each plot. `label_both` specifies that we want both the variable name (generalhealth) and the value (e.g., 1) printed on the plot to make it easier to read.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(function_data, aes(x = gaitspeed)) +\n  geom_histogram(binwidth = 0.05, \n                 boundary = 0, \n                 fill = \"dodgerblue\", \n                 color = \"black\") +\n  facet_wrap(~generalhealth, \n             ncol = 1, # try changing this to 2 \n             labeller = label_both) +\n  scale_x_continuous(name = \"Gait speed (m/s)\",\n                     breaks = seq(0.0, 1.4, 0.2))\n```\n\n::: {.cell-output-display}\n![A histogram with facets.](03-viz_files/figure-html/fig-fact-plot-1.png){#fig-fact-plot fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-note}\n## More plots styles\n\nThese are not, by any means, all the plot types that you can make in R. This chapter just gave you a basic overview, and we will go into more detail in @sec-custom-viz). The [further resources](#resources-viz) section at the end of this chapter lists many resources, but the [R Graph Gallery](http://www.r-graph-gallery.com/){target=\"_blank\"} is especially useful to get inspiration for the kinds of beautiful plots you can make in R. \n:::\n\n## Exercises\n\nFor the final step in this chapter, we will create a report of data visualisations. You may need to refer back to @sec-reports) to help you complete these exercises and you may also want to take a break before you work through this section. We'd also recommend you <a href='https://psyteachr.github.io/glossary/k#knit' target='_blank' class='glossary' title='To create an HTML, PDF, or Word document from an R Markdown (Rmd) document'>knit</a> at every step so that you can see how your output changes.\n\n### New Markdown {#sec-exercises-new-rmd-3}\n\nCreate and save a new R Markdown document named `plots_report.Rmd` and give it the title \"Healthy ageing report\". Remove the default template text and then load the packages and code below in the set-up code chunk:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\nfunction_data <- read_csv(\"https://healthteachr.github.io/data/Function_and_PA_data.csv\")\n```\n:::\n\n\n### Summary {#sec-exercises-summary}\n\nCreate a level 1 heading titled \"Overview\". Underneath this heading, write a short summary of what the data set contains and what each of the variables means (you can use the information from @sec-plots-loading-data if you like).\n\n### Presenting plots\n\nPick your two favourites plots from all the examples we've made in this chapter. For each plot:\n\n* Create a level 2 heading in your R Markdown document and give it an informative title.\n* Write a short summary that interprets the data shown in the plots - it's not enough just to present visualisations, effective reports will also help the reader understand the conclusions they should draw from the plots you've presented.\n* Look through the different themes available with [<pkg>ggtheme</pkg>](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) and  choose one to apply to your plots.\n* Make sure each plot has a figure caption (either by adding this to the `ggplot()` code or adding it to the code chunk options).\n* Organise your Markdown so that the plots are shown **after** the text summary.\n\n### Combining plots\n\nNow, pick your two least favourite plots:\n\n* Adjust the visual aesthetics to make them look as bad and as difficult to read as possible.\n* Combine the plots with the original version using patchwork functions.\n* Write a short summary that explains why you think these plots are so bad.\n* Organise your Markdown so that the plots are shown **after** the text summary.\n\n### Editing your Markdown display\n\nAdjust the set-up of your Markdown so that your knitted report does not show any code, messages, or warnings, and all figures are 8 x 5 (see @sec-rmd-setup).\n\n\n### Share your work\n\nOnce you've completed this activity, post it in the Week 3 channel on Teams so that you can compare which plots you chose and visual style with other learners on the course.\n\n## Glossary {#sec-glossary-viz}\n\n\n::: {.cell layout-align=\"center\"}\n\n|term          |definition                                                                                                                                                                           |\n|:-------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|argument      |A variable that provides input to a function.                                                                                                                                        |\n|categorical   |Data that can only take certain values, such as types of pet.                                                                                                                        |\n|Categorical   |Data that can only take certain values, such as types of pet.                                                                                                                        |\n|character     |A data type representing strings of text.                                                                                                                                            |\n|chunk         |A section of code in an R Markdown file                                                                                                                                              |\n|continuous    |Data that can take on any values between other existing values.                                                                                                                      |\n|Continuous    |Data that can take on any values between other existing values.                                                                                                                      |\n|data type     |The kind of data represented by an object.                                                                                                                                           |\n|default value |A value that a function uses for an argument if it is skipped.                                                                                                                       |\n|double        |A data type representing a real decimal number                                                                                                                                       |\n|factor        |A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter                                                           |\n|geom          |The geometric style in which data are displayed, such as boxplot, density, or histogram.                                                                                             |\n|integer       |A data type representing whole numbers.                                                                                                                                              |\n|knit          |To create an HTML, PDF, or Word document from an R Markdown (Rmd) document                                                                                                           |\n|Likert        |A rating scale with a small number of discrete points in order                                                                                                                       |\n|logical       |A data type representing TRUE or FALSE values.                                                                                                                                       |\n|median        |The middle number in a distribution where half of the values are larger and half are smaller.                                                                                        |\n|nominal       |Categorical variables that don&#39;t have an inherent order, such as types of animal.                                                                                                |\n|numeric       |A data type representing a real decimal number or integer.                                                                                                                           |\n|observation   |All of the data about a single trial or question.                                                                                                                                    |\n|ordinal       |Discrete variables that have an inherent order, such as level of education or dislike/like.                                                                                          |\n|outlier       |A data point that is extremely distant from most of the other data points                                                                                                            |\n|R Markdown    |The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.                     |\n|string        |A piece of text inside of quotes.                                                                                                                                                    |\n|tidy data     |A format for data that maps the meaning onto the structure.                                                                                                                          |\n|value         |A single number or piece of data.                                                                                                                                                    |\n|variable      |(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe |\n|vector        |A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.                                                                         |\n:::\n\n\n\n## Further Resources {#sec-resources-viz}\n\n* [ggplot2 cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)\n* [Data visualisation using R, for researchers who don't use R](https://healthteachr.github.io/introdataviz/) [@nordmann_2021]\n* [Chapter 3: Data Visualisation](http://r4ds.had.co.nz/data-visualisation.html) of *R for Data Science*\n* [ggplot2 FAQs](https://ggplot2.tidyverse.org/articles/)\n* [ggplot2 documentation](https://ggplot2.tidyverse.org/reference/)\n* [Hack Your Data Beautiful](https://healthteachr.github.io/hack-your-data/) workshop by University of Glasgow postgraduate students\n* [Chapter 28: Graphics for communication](http://r4ds.had.co.nz/graphics-for-communication.html) of *R for Data Science*\n* [gganimate](https://gganimate.com/): A package for making animated plots\n\n",
    "supporting": [
      "03-viz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}