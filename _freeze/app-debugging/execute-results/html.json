{
  "hash": "4dc593ca73ee2c344b2d298b66f612b4",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Debugging {#sec-debugging}\n\n\n\n\n\nThe best advice for dealing with errors (debugging) is to check your work early and often. This means setting up your report outline and getting all of the YAML header bugs fixed before you deal with adding code. Once the general structure and look of the report is right, start adding code and testing that everything is working after each code block and knitting after every section. This way, when you encounter the inevitable errors, there is only a small amount of new code to check.   \n\n## Report Setup\n\nCreate a new R Markdown file and delete everything below the setup chunk. Edit the YAML header to use a floating table of contents and add the outline of your report.\n\n````\n---\ntitle: \"Report\"\ndate: \"2024-09-28\"\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n---\n\n\n\n## Introduction\n\n## Data\n\n### Term 1\n\n### Term 2\n\n## Analysis\n\n## References\n````\n\nSave this file and knit it. Ideally, this will generate some output in a new tab in the console pane called \"Render\" that starts with `processing file: report-demo.Rmd` and ends with `Output created: report-demo.html`. There will be a lot of output in between, but you don't need to worry about it until something goes wrong.\n\n## YAML Errors\n\nOne of the more frequent problems is errors in the YAML header. Let's create a few to see how to deal with them.\n\n### YAML borders\n\nDelete the last dash below the header and knit.\n\n```\n---\ntitle: \"Report\"\ndate: \"2024-09-28\"\noutput: \n  html_document:\n    toc: true\n    toc_float: true\n--\n```\n\nThis will actually knit without error (and look odd), but you'll get a warning about the empty title. This is because R Markdown doesn't recognise that there even is a YAML header if the three dashes to start and end it aren't right. \n\n### Spaces \n\nUnlike R and markdown, YAML is extremely picky about spaces. Try removing the space after the colon after \"toc\".\n\n```\n---\ntitle: \"Report\"\ndate: \"2024-09-28\"\noutput: \n  html_document:\n    toc:true\n    toc_float: true\n---\n```\n\nYou should get an error that looks like this:\n\n```\nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Scanner error: mapping values are not allowed in this context at line 6, column 14\nCalls: <Anonymous> ... parse_yaml_front_matter -> yaml_load -> <Anonymous>\nExecution halted\n```\n\nIf you see `Error in yaml` and it gives you a line and column number, this refers to the YAML line, so start counting with 1 at the title line. Sometimes the actual problem is in the line above or below the reference. Here, the problem is a missing space in the toc line, but that doesn't cause an error in the YAML parsing until it gets to the next line.\n\n### Indenting\n\nYAML is also extremely picky about indenting. A common error is not putting `html_document:` on a separate line when adding options like a table of contents. \n\n```\n---\ntitle: \"Report\"\ndate: \"2024-09-28\"\noutput: html_document:\n    toc: true\n    toc_float: true\n---\n```\n\nYou should get an error that looks like this:\n\n```\nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Scanner error: mapping values are not allowed in this context at line 3, column 22\n```\n\nSome indenting problems don't cause an error, but result in an output that isn't doing what you expect. Try removing the indent for the table of contents lines and knitting.\n\n```\n---\ntitle: \"Report\"\ndate: \"2024-09-28\"\noutput: \n  html_document:\n  toc: true\n  toc_float: true\n---\n```\n\n\n## Common Errors\n\nThe best way to learn to deal with errors is to make a lot of them. That way, the next time you encounter a similar error, you'll have some experience solving it. \n\nRun the following code in the console; **don't add it to the report script**.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\nNow, make a code chunk somewhere in your report like this and run it interactively (not by knitting). It should create a new table called `droids` with 6 rows.  \n\n```{{r}}\ndroids <- starwars %>% filter(species == \"Droid\")\n```\n\nNow try to knit the report. Because you didn't load the tidyverse package bundle in the script, you'll get an error about not being able to find the function `%>%` (you'll learn about the pipe in @sec-pipes-first). When you knit, any objects in your <a href='https://psyteachr.github.io/glossary/g#global-environment' target='_blank' class='glossary' title='The interactive workspace where your script runs'>global environment</a> or packages that you've loaded are unavailable and the script only has access to objects it creates and packages it loads.\n\nAdd `library(tidyverse)` to the setup chunk and knit to confirm this works. \n\n### Could not find function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntitle <- pasteO(\"Lavendar\", \"Haze\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in pasteO(\"Lavendar\", \"Haze\"): could not find function \"pasteO\"\n```\n\n\n:::\n:::\n\n\nWhen you get the message `could not find function \"func\"`, usually one of two things has happened: you haven't loaded the package that the function is from or you've made a typo in the function name. In this example, the function is actually `paste0()` with a zero.\n\n### Unused argument\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(N = 10)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in rnorm(N = 10): unused argument (N = 10)\n```\n\n\n:::\n:::\n\n\nWhen you get the error \"unused argument\", it usually means either that you've made a typo in an argument name, or the function doesn't have that argument. Remember that argument, like functions and objects, are case-sensitive. Check the arguments with tab-autocomplete or checking the help for that function. \n\n### Non-numeric argument to binary operator\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1 + \"A\"\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in 1 + \"A\": non-numeric argument to binary operator\n```\n\n\n:::\n:::\n\n\nWhen you try to apply mathematical operations to objects that aren't numbers, you get this error. You might see this from a function that internally applies these operators; it just means that the person who wrote the function didn't specifically check that the arguments you input were <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> and write a more specific error message, they just used what you provided and relied on the error messages from the binary operators. Either way, to solve this you need to figure out what should be numeric, but isn't. \n\n### Tibble columns must have compatible sizes\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble::tibble(\n  x = 1:2,\n  y = 1:3\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `tibble::tibble()`:\n! Tibble columns must have compatible sizes.\n• Size 2: Existing data.\n• Size 3: Column `y`.\nℹ Only values of size one are recycled.\n```\n\n\n:::\n:::\n\n\nThis error occurs when you're creating a table using `tibble()` and the columns have different lengths. You can set a column to a single value (i.e., a vector with length 1) and it will be \"recycled\" for every row, but you can't give two columns values with different lengths if their lengths are greater than 1.\n\nThe same problem occurs if the function you're using adds columns to a tibble. The tidyverse error messages are generall very useful in this case.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmtcars3 <- mutate(mtcars, newcol = 1:3)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `newcol = 1:3`.\nCaused by error:\n! `newcol` must be size 32 or 1, not 3.\n```\n\n\n:::\n:::\n\n\n\n### Arguments imply differing number of rows\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata.frame(\n  x = 1:2,\n  y = 1:3\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in data.frame(x = 1:2, y = 1:3): arguments imply differing number of rows: 2, 3\n```\n\n\n:::\n:::\n\n\nA similar problem occurs if you're using the <a href='https://psyteachr.github.io/glossary/b#base-r' target='_blank' class='glossary' title='The set of R functions that come with a basic installation of R, before you add external packages.'>base R</a> function `data.frame()` (or the function you're using does). The error message is different, but it's the same problem. You will also see a related error message if you use base R techniques to add a column with a different length to the data frame. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmtcars$newcol <- 1:3\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `$<-.data.frame`(`*tmp*`, newcol, value = 1:3): replacement has 3 rows, data has 32\n```\n\n\n:::\n:::\n\n\n## Debugging methods\n\n### Restart and rerun\n\nIt's very useful to be able to run code interactively, but this can sometimes lead to confusion about what objects are available in your code. You might have made a data table called `profits`, and then decided to edit the code to make it slightly differently. If you forgot to re-run the code, you'll be using the old table in your interactive code, but the new table when you knit. \n\nRestart R (under the <if>Session</if> menu) and run the code in order up to the chunk where you're having a problem. You can use the Run menu in the upper right of the source pane to run all chunks above your cursor position.\n\n### Comment out\n\nA useful method of debugging a tricky error is commenting out parts of your code and re-running the code to figure out exactly which code is causing the problem. Try \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- starwars %>%\n  select(name, height, mass, species) %>%\n  filter(Species == \"Droid\") %>%\n  select(-species) %>%\n  filter(mass < 100)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\nℹ In argument: `Species == \"Droid\"`.\nCaused by error:\n! object 'Species' not found\n```\n\n\n:::\n:::\n\n\nImagine the error message was a bit less helpful. You can try running the code line by line. Either select just the code you want to run, or comment out the code you don't want to run. Remember to also comment out linking functions at the end of lines, like the pipe (`%>%`) or the ggplot plus (`+`). \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- starwars #%>%\n  # select(name, height, mass, species) %>%\n  # filter(Species == \"Droid\") %>%\n  # select(-species) %>%\n  # filter(mass < 100)\n```\n:::\n\n\n:::{.callout-tip}\nYou can comment out multiple lines by selecting them with your cursor and choosing <if>Code > Comment/Uncomment Lines</if> (or using the keyboard shortcut).\n:::\n\nSelect more code or delete the comments until you locate the error.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- starwars %>%\n  select(name, height, mass, species) %>%\n  filter(Species == \"Droid\") #%>%\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `filter()`:\nℹ In argument: `Species == \"Droid\"`.\nCaused by error:\n! object 'Species' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n  # select(-species) %>%\n  # filter(mass < 100)\n```\n:::\n\n\n### Google the error\n\nMany error messages seem incomprehensible. Googling this message can often lead you to solutions. Take the famous example of \"object of type 'closure' is not subsettable\". \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata$x <- 1\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in data$x <- 1: object of type 'closure' is not subsettable\n```\n\n\n:::\n:::\n\n\nA Google search will show several sources explaining this confounding message and how to fix it. Although you may also find Jenny Bryan's [famous talk of the same name](https://www.youtube.com/watch?v=vgYS-F8opgE), which is an excellent discussion of troubleshooting in R.\n\n:::{.callout-note}\nAn \"object of type 'closure'\" is coding jargon for a function (like the type of `1` is numeric or the type of `\"A\"` is character). And \"subsetting\" is accessing part of a table using `$` or square brackets. Here, it means that `data` isn't a table, but actually a function, so you can't add a column to it. \n:::\n\n\n### Reproducible examples\n\nYou might see people in coding forums like StackOverflow asking for a \"reprex\", or a reproducible example. This is the smallest, completely self-contained example of your problem or question. \n\nFor example, you may have a question about how to figure out how to select rows that contain the value \"test\" in a certain column, but it isn't working. It's clearer if you can provide a concrete example, but you don't want to have to type out the whole table you're using or all the code that got you to this point in your script. \n\nYou can include a very small table with just the basics or a smaller version of your problem. Make comments at each step about what you expect and what you actually got. \n\nWhich version is easier for you to figure out the solution?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# this doesn't work\nno_test_data <- data |>\n  filter(!str_detect(type, \"test\"))\n```\n:::\n\n\n... OR ...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n# with a minimal example table\ndata <- tribble(\n  ~id, ~type, ~x,\n  1, \"test\", 12,\n  2, \"testosterone\", 15,\n  3, \"estrogen\", 10\n)\n\n# this should keep IDs 2 and 3, but removes ID 2\nno_test_data <- data |>\n  filter(!str_detect(type, \"test\"))\n\n# expected to be true\nall(no_test_data$type == c(\"testosterone\", \"estrogen\"))\n```\n:::\n\n\nOne of the big benefits to creating a reprex is that you often solve your own problem while you're trying to break it down to explain to someone else.\n\nIf you really want to go down the rabbit hole, you can create a reproducible example using the [reprex](https://www.tidyverse.org/help/#reprex) package from tidyverse.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}