{
  "hash": "96762a3c0a8447b5b2a970a02cb8596d",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Data Types {#sec-data-types}\n\n## Basic data types \n\nData can be numbers, words, true/false values or combinations of these. The basic <a href='https://psyteachr.github.io/glossary/d#data-type' target='_blank' class='glossary' title='The kind of data represented by an object.'>data types</a> in R are: <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a>, <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a>, and <a href='https://psyteachr.github.io/glossary/l#logical' target='_blank' class='glossary' title='A data type representing TRUE or FALSE values.'>logical</a>, as well as the special classes of <a href='https://psyteachr.github.io/glossary/f#factor' target='_blank' class='glossary' title='A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter'>factor</a> and date/times.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Data types are like the categories when you format cells in Excel.](images/appx/excel-format-cells.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n\n### Numeric data\n\nAll of the numbers are <a href='https://psyteachr.github.io/glossary/n#numeric' target='_blank' class='glossary' title='A data type representing a real decimal number or integer.'>numeric</a> data types. There are two types of numeric data, <a href='https://psyteachr.github.io/glossary/i#integer' target='_blank' class='glossary' title='A data type representing whole numbers.'>integer</a> and <a href='https://psyteachr.github.io/glossary/d#double' target='_blank' class='glossary' title='A data type representing a real decimal number'>double</a>. Integers are the whole numbers, like -1, 0 and 1. Doubles are numbers that can have fractional amounts. If you just type a plain number such as `10`, it is stored as a double, even if it doesn't have a decimal point. If you want it to be an exact integer, you can use the `L` suffix (10L), but this distinction doesn't make much difference in practice.\n\nIf you ever want to know the data type of something, use the `typeof` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(10)   # double\ntypeof(10.0) # double\ntypeof(10L)  # integer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n[1] \"double\"\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\nIf you want to know if something is numeric (a double or an integer), you can use the function `is.numeric()` and it will tell you if it is numeric (`TRUE`) or not (`FALSE`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nis.numeric(10L)\nis.numeric(10.0)\nis.numeric(\"Not a number\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n[1] TRUE\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n### Character data\n\n<a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>Characters</a> (also called \"strings\") are any text between quotation marks. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(\"This is a character string\")\ntypeof('You can use double or single quotes')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\nThis can include quotes, but you have to <a href='https://psyteachr.github.io/glossary/e#escape' target='_blank' class='glossary' title='Include special characters like â€œ inside of a string by prefacing them with a backslash.'>escape</a> quotes using a backslash to signal that the quote isn't meant to be the end of the string.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe instructor said, \"R is cool,\" and the class agreed.\n```\n\n\n:::\n:::\n\n\n### Logical Data\n\n<a href='https://psyteachr.github.io/glossary/l#logical' target='_blank' class='glossary' title='A data type representing TRUE or FALSE values.'>Logical</a> data (also sometimes called \"boolean\" values) is one of two values: true or false. In R, we always write them in uppercase: `TRUE` and `FALSE`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(TRUE)\nclass(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\nWhen you compare two values with an <a href='https://psyteachr.github.io/glossary/o#operator' target='_blank' class='glossary' title='A symbol that performs some mathematical or comparative process.'>operator</a>, such as checking to see if 10 is greater than 5, the resulting value is logical.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nis.logical(10 > 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\nYou might also see logical values abbreviated as `T` and `F`, or `0` and `1`. This can cause some problems down the road, so we will always spell out the whole thing.\n:::\n\n### Factors\n\nA <a href='https://psyteachr.github.io/glossary/f#factor' target='_blank' class='glossary' title='A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter'>factor</a> is a specific type of integer that lets you specify the categories and their order. This is useful in data tables to make plots display with categories in the correct order.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\"))\nmyfactor\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] B\nLevels: A B C\n```\n\n\n:::\n:::\n\n\nFactors are a type of integer, but you can tell that they are factors by checking their `class()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(myfactor)\nclass(myfactor)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n### Dates and Times\n\nDates and times are represented by doubles with special classes. Although `typeof()` will tell you they are a double, you can tell that they are dates by checking their `class()`. Datetimes can have one or more of a few classes that start with `POSIX`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndate <- as.Date(\"2022-01-24\")\ndatetime <- ISOdatetime(2022, 1, 24, 10, 35, 00, \"GMT\")\ntypeof(date)\ntypeof(datetime)\nclass(date)\nclass(datetime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n[1] \"double\"\n[1] \"Date\"\n[1] \"POSIXct\" \"POSIXt\" \n```\n\n\n:::\n:::\n\n\nSee @sec-dates-times for how to use <pkg>lubridate</pkg> to work with dates and times.\n\n\n\n\n\n\n::: {.callout-note .try}\nWhat data types are these:\n\n* `100` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value='answer'>double</option><option value=''>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `100L` <select class='webex-select'><option value='blank'></option><option value='answer'>integer</option><option value=''>double</option><option value=''>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `\"100\"` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value='answer'>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `100.0` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value='answer'>double</option><option value=''>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `-100L` <select class='webex-select'><option value='blank'></option><option value='answer'>integer</option><option value=''>double</option><option value=''>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `factor(100)` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value=''>character</option><option value=''>logical</option><option value='answer'>factor</option></select>\n* `TRUE` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value=''>character</option><option value='answer'>logical</option><option value=''>factor</option></select>\n* `\"TRUE\"` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value='answer'>character</option><option value=''>logical</option><option value=''>factor</option></select>\n* `FALSE` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value=''>character</option><option value='answer'>logical</option><option value=''>factor</option></select>\n* `1 == 2` <select class='webex-select'><option value='blank'></option><option value=''>integer</option><option value=''>double</option><option value=''>character</option><option value='answer'>logical</option><option value=''>factor</option></select>\n\n:::\n\n\n\n## Basic container types {#sec-containers}\n\nIndividual data values can be grouped together into containers. The main types of containers we'll work with are vectors, lists, and data tables.\n\n### Vectors {#sec-vectors}\n\nA <a href='https://psyteachr.github.io/glossary/v#vector' target='_blank' class='glossary' title='A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.'>vector</a> in R is a set of items (or 'elements') in a specific order. All of the elements in a vector must be of the same **data type** (numeric, character, logical). You can create a vector by enclosing the elements in the function `c()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## put information into a vector using c(...)\nc(1, 2, 3, 4)\nc(\"this\", \"is\", \"cool\")\n1:6 # shortcut to make a vector of all integers x:y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n[1] \"this\" \"is\"   \"cool\"\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n::: {.callout-note .try}\nWhat happens when you mix types? What class is the variable `mixed`?\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmixed <- c(2, \"good\", 2L, \"b\", TRUE)\n```\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='Solution'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\ntypeof(mixed)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n:::\n:::\n\n\n:::\n\n::: {.callout-warning}\nYou can't mix data types in a vector; all elements of the vector must be the same data type. If you mix them, R will <a href='https://psyteachr.github.io/glossary/c#coercion' target='_blank' class='glossary' title='Changing the data type of values in a vector to a single compatible type.'>coerce</a> them so that they are all the same. If you mix doubles and integers, the integers will be changed to doubles. If you mix characters and numeric types, the numbers will be coerced to characters, so `10` would turn into `\"10\"`.\n:::\n\n#### Selecting values from a vector\n\nIf we wanted to pick specific values out of a vector by position, we can use square brackets (an <a href='https://psyteachr.github.io/glossary/e#extract-operator' target='_blank' class='glossary' title='A symbol used to get values from a container object, such as [, [[, or $'>extract operator</a>, or `[]`) after the vector.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvalues <- c(10, 20, 30, 40, 50)\nvalues[2] # selects the second value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20\n```\n\n\n:::\n:::\n\n\nYou can select more than one value from the vector by putting a vector of numbers inside the square brackets. For example, you can select the 18th, 19th, 20th, 21st, 4th, 9th and 15th letter from the built-in vector `LETTERS` (which gives all the uppercase letters in the Latin alphabet).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nword <- c(18, 19, 20, 21, 4, 9, 15)\nLETTERS[word]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R\" \"S\" \"T\" \"U\" \"D\" \"I\" \"O\"\n```\n\n\n:::\n:::\n\n\n::: {.callout-note .try}\n\nCan you decode the secret message?\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsecret <- c(14, 5, 22, 5, 18, 7, 15, 14, 14, 1, 7, 9, 22, 5, 25, 15, 21, 21, 16)\n```\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='Solution'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nLETTERS[secret]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"N\" \"E\" \"V\" \"E\" \"R\" \"G\" \"O\" \"N\" \"N\" \"A\" \"G\" \"I\" \"V\" \"E\" \"Y\" \"O\" \"U\" \"U\" \"P\"\n```\n\n\n:::\n\n:::\n:::\n\n:::\n\nYou can also create 'named' vectors, where each element has a name. For example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec <- c(first = 77.9, second = -13.2, third = 100.1)\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n first second  third \n  77.9  -13.2  100.1 \n```\n\n\n:::\n:::\n\n\nWe can then access elements by name using a character vector within the square brackets. We can put them in any order we want, and we can repeat elements:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvec[c(\"third\", \"second\", \"second\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n third second second \n 100.1  -13.2  -13.2 \n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\nWe can get the vector of names using the `names()` function, and we can set or change them using something like `names(vec2) <- c(\"n1\", \"n2\", \"n3\")`.\n:::\n\nAnother way to access elements is by using a logical vector within the square brackets. This will pull out the elements of the vector for which the corresponding element of the logical vector is `TRUE`. If the logical vector doesn't have the same length as the original, it will repeat. You can find out how long a vector is using the `length()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlength(LETTERS)\nLETTERS[c(TRUE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26\n [1] \"A\" \"C\" \"E\" \"G\" \"I\" \"K\" \"M\" \"O\" \"Q\" \"S\" \"U\" \"W\" \"Y\"\n```\n\n\n:::\n:::\n\n\n#### Repeating Sequences {#sec-rep_seq}\n\nHere are some useful tricks to save typing when creating vectors.\n\nIn the command `x:y` the `:` operator would give you the sequence of number starting at `x`, and going to `y` in increments of 1. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1:10\n15.3:20.5\n0:-10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n[1] 15.3 16.3 17.3 18.3 19.3 20.3\n [1]   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10\n```\n\n\n:::\n:::\n\n\nWhat if you want to create a sequence but with something other than integer steps? You can use the `seq()` function. Look at the examples below and work out what the arguments do.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nseq(from = -1, to = 1, by = 0.2)\nseq(0, 100, length.out = 11)\nseq(0, 10, along.with = LETTERS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0\n [1]   0  10  20  30  40  50  60  70  80  90 100\n [1]  0.0  0.4  0.8  1.2  1.6  2.0  2.4  2.8  3.2  3.6  4.0  4.4  4.8  5.2  5.6\n[16]  6.0  6.4  6.8  7.2  7.6  8.0  8.4  8.8  9.2  9.6 10.0\n```\n\n\n:::\n:::\n\n\nWhat if you want to repeat a vector many times? You could either type it out (painful) or use the `rep()` function, which can repeat vectors in different ways.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrep(0, 10)                      # ten zeroes\nrep(c(1L, 3L), times = 7)       # alternating 1 and 3, 7 times\nrep(c(\"A\", \"B\", \"C\"), each = 2) # A to C, 2 times each\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 0 0 0 0 0 0 0 0 0\n [1] 1 3 1 3 1 3 1 3 1 3 1 3 1 3\n[1] \"A\" \"A\" \"B\" \"B\" \"C\" \"C\"\n```\n\n\n:::\n:::\n\n\nThe `rep()` function is useful to create a vector of logical values (`TRUE`/`FALSE` or `1`/`0`) to select values from another vector.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Get IDs in the pattern Y Y N N ...\nids <- 1:40\nyynn <- rep(c(TRUE, FALSE), each = 2, \n            length.out = length(ids))\nids[yynn]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  1  2  5  6  9 10 13 14 17 18 21 22 25 26 29 30 33 34 37 38\n```\n\n\n:::\n:::\n\n\n\n### Lists\n\nRecall that vectors can contain data of only one type. What if you want to store a collection of data of different data types? For that purpose you would use a <a href='https://psyteachr.github.io/glossary/l#list' target='_blank' class='glossary' title='A container data type that allows items with different data types to be grouped together.'>list</a>. Define a list using the `list()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_types <- list(\n  double = 10.0,\n  integer = 10L,\n  character = \"10\",\n  logical = TRUE\n)\n\nstr(data_types) # str() prints lists in a condensed format\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ double   : num 10\n $ integer  : int 10\n $ character: chr \"10\"\n $ logical  : logi TRUE\n```\n\n\n:::\n:::\n\n\nYou can refer to elements of a list using square brackets like a vector, but you can also use the dollar sign notation (`$`) if the list items have names.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_types$logical\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n::: {.callout-note .try}\n\nExplore the 5 ways shown below to extract a value from a list. What data type is each object? What is the difference between the single and double brackets? Which one is the same as the dollar sign?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbracket1 <- data_types[1]\nbracket2 <- data_types[[1]]\nname1    <- data_types[\"double\"]\nname2    <- data_types[[\"double\"]]\ndollar   <- data_types$double\n```\n:::\n\n\n:::\n\nThe single brackets (`bracket1` and `name1`) return a list with the subset of items inside the brackets. In this case, that's just one item, but can be more (try `data_types[1:2]`). The items keep their names if they have them, so the returned value is `list(double = 10)`.\n\nThe double brackets (`bracket2` and `name2` return a single item as a vector. You can't select more than one item; `data_types[[1:2]]` will give you a \"subscript out of bounds\" error. \n\nThe dollar-sign notation is the same as double-brackets. If the name has spaces or any characters other than letters, numbers, underscores, and full stops, you need to surround the name with backticks (e.g., `` sales$`Customer ID` ``).\n\n\n### Tables {#sec-tables-data}\n\n<a href='https://psyteachr.github.io/glossary/t#tabular-data' target='_blank' class='glossary' title='Data in a rectangular table format, where each row has an entry for each column.'>Tabular data</a> structures allow for a collection of data of different types (characters, integers, logical, etc.) but subject to the constraint that each \"column\" of the table (element of the list) must have the same number of elements. The base R version of a table is called a `data.frame`, while the 'tidyverse' version is called a `tibble`.  Tibbles are far easier to work with, so we'll be using those. To learn more about differences between these two data structures, see `vignette(\"tibble\")`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# construct a table by column with tibble\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.1     âœ” tibble    3.2.1\nâœ” lubridate 1.9.3     âœ” tidyr     1.3.1\nâœ” purrr     1.0.2     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE\n)\n\n# or by row with tribble\navatar <- tribble(\n  ~name,    ~bends,  ~friendly,\n  \"Katara\", \"water\", TRUE,\n  \"Toph\",   \"earth\", TRUE,\n  \"Sokka\",  NA,      TRUE\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# export the data to a file\nrio::export(avatar, \"data/avatar.csv\")\n\n# or by importing data from a file\navatar <- rio::import(\"data/avatar.csv\")\n```\n:::\n\n\nTabular data becomes especially important for when we talk about <a href='https://psyteachr.github.io/glossary/t#tidy-data' target='_blank' class='glossary' title='A format for data that maps the meaning onto the structure.'>tidy data</a> in @sec-tidy, which consists of a set of simple principles for structuring data.\n\n#### Table info\n\nWe can get information about the table using the following functions.\n\n* `ncol()`: number of columns\n* `nrow()`: number of rows\n* `dim()`: the number of rows and number of columns \n* `name()`: the column names\n* `glimpse()`: the column types\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnrow(avatar)\nncol(avatar)\ndim(avatar)\nnames(avatar)\nglimpse(avatar)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n[1] 3\n[1] 3 3\n[1] \"name\"     \"bends\"    \"friendly\"\nRows: 3\nColumns: 3\n$ name     <chr> \"Katara\", \"Toph\", \"Sokka\"\n$ bends    <chr> \"water\", \"earth\", NA\n$ friendly <lgl> TRUE, TRUE, TRUE\n```\n\n\n:::\n:::\n\n\n#### Accessing rows and columns {#sec-row-col-access}\n\nThere are various ways of accessing specific columns or rows from a table. You'll be learning more about this in @sec-tidy and @sec-wrangle. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsiblings   <- avatar %>% slice(1, 3) # rows (by number)\nbends      <- avatar %>% pull(2) # column vector (by number)\nfriendly   <- avatar %>% pull(friendly) # column vector (by name)\nbends_name <- avatar %>% select(bends, name) # subset table (by name)\ntoph       <- avatar %>% pull(name) %>% pluck(2) # single cell\n```\n:::\n\n\nThe code below uses <a href='https://psyteachr.github.io/glossary/b#base-r' target='_blank' class='glossary' title='The set of R functions that come with a basic installation of R, before you add external packages.'>base R</a> to produce the same subsets as the functions above. This format is useful to know about, since you might see them in other people's scripts.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# base R access\n\nsiblings   <- avatar[c(1, 3), ] # rows (by number)\nbends      <- avatar[, 2] # column vector (by number)\nfriendly   <- avatar$friendly  # column vector (by name)\nbends_name <- avatar[, c(\"bends\", \"name\")] # subset table (by name)\ntoph       <- avatar[[2, 1]] # single cell (row, col)\n```\n:::\n\n\n## Glossary {#sec-glossary-datatypes}\n\n\n::: {.cell layout-align=\"center\"}\n\n|term             |definition                                                                                                                 |\n|:----------------|:--------------------------------------------------------------------------------------------------------------------------|\n|base R           |The set of R functions that come with a basic installation of R, before you add external packages.                         |\n|character        |A data type representing strings of text.                                                                                  |\n|coercion         |Changing the data type of values in a vector to a single compatible type.                                                  |\n|data type        |The kind of data represented by an object.                                                                                 |\n|double           |A data type representing a real decimal number                                                                             |\n|escape           |Include special characters like \" inside of a string by prefacing them with a backslash.                                   |\n|extract operator |A symbol used to get values from a container object, such as [, [[, or $                                                   |\n|factor           |A data type where a specific set of values are stored with labels; An explanatory variable manipulated by the experimenter |\n|integer          |A data type representing whole numbers.                                                                                    |\n|list             |A container data type that allows items with different data types to be grouped together.                                  |\n|logical          |A data type representing TRUE or FALSE values.                                                                             |\n|numeric          |A data type representing a real decimal number or integer.                                                                 |\n|operator         |A symbol that performs some mathematical or comparative process.                                                           |\n|Tabular data     |Data in a rectangular table format, where each row has an entry for each column.                                           |\n|tidy data        |A format for data that maps the meaning onto the structure.                                                                |\n|vector           |A type of data structure that collects values with the same data type, like T/F values, numbers, or strings.               |\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}