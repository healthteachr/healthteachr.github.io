{
  "hash": "03e1060aac252a38e115ed454fa8ada6",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Data Tidying {#sec-tidy}\n\n\n\n\n\n\n## Intended Learning Outcomes {#sec-ilo-tidy .unnumbered}\n\n-   Be able to reshape data between long and wide formats\n-   Separate, change, reorder, and rename columns\n-   Use pipes to chain together functions\n\n## Walkthrough video {#sec-walkthrough-tidy .unnumbered}\n\nThere is a walkthrough video of this chapter available via [Echo360](https://echo360.org.uk/media/3f9cbd60-622e-4128-95e7-d825e5fa922c/public). Please note that there may have been minor edits to the book since the video was recorded. Where there are differences, the book should always take precedence.\n\n## Set-up {#sec-setup-tidy}\n\nFirst, create a new project for the work we'll do in this chapter named <code class='path'>08-tidy</code>. Second, open and save a new R Markdown document named `tidy.Rmd`, delete the welcome text and load the required packages for this chapter.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nlibrary(tidyverse) # for data wrangling\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nYou'll need to make a folder called \"data\" and download two data files into it: \n<a href=\"https://healthteachr.github.io/data/tidy_data.csv\" download>tidy_data.csv</a> and\n<a href=\"https://healthteachr.github.io/data/untidy_data.csv\" download>untidy_data.csv</a>.\n\nDownload the [Data tidying cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf).\n\n## Data Structures\n\nThe data you work with will likely come in many different formats and structures. Some of these structures may be driven by how the software you use outputs the data, but data structures may also differ because of human intervention or attempts at organisation, some of which may not be particularly helpful.\n\nData cleaning and tidying will likely be the most time consuming and difficult task you perform. Whilst you can create code recipes for analyses and visualisations, as Hadley Whickham puts it, [\"every messy dataset is messy in its own way\"](https://vita.had.co.nz/papers/tidy-data.pdf), which means that you will often have to solve new problems that are specific to the dataset. Additionally, moving between data structures that are intuitive to read by humans and those that are useful for a computer requires a conceptual shift that only comes with practice. \n\nThis is all a verbose way of saying that what lies ahead in this chapter is unlikely to sink in on the first attempt and you will need to practice with different examples (preferably with data you know well) before you truly feel comfortable with it.\n\nFirst, some terminology.\n\nAn <a href='https://psyteachr.github.io/glossary/o#observation' target='_blank' class='glossary' title='All of the data about a single trial or question.'>observation</a> is all the information about a single \"thing\" in a single condition, such as at one point in time. These things can be participants, scores, injuries, feedback questionnaires, social media posts, or really anything. Observations should have a way to identify them, such as a unique ID or a unique combination of values like country and year.\n\nA <a href='https://psyteachr.github.io/glossary/v#variable' target='_blank' class='glossary' title='(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe'>variable</a> is one type of information about the observation. For example, if the observation is a lacrosse goal, the variables you might have about the goal are the goal ID, the goal scorer's ID, the time of the goal, the location on the pitch where the play was made, and the goal scorer's player position.\n\nA <a href='https://psyteachr.github.io/glossary/v#value' target='_blank' class='glossary' title='A single number or piece of data.'>value</a> is the data for one variable for one observation. For example, the value of the time variable from the observation of a goal might be `19:38:54`.\n\n::: {.callout-note .try}\nThe following table is data that shows the number of items (in this case, agility ladders) each amateur football coach bought each year.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year| items|\n|--------:|----:|-----:|\n|        1| 2018|     2|\n|        1| 2019|     8|\n|        1| 2020|    10|\n|        2| 2018|     1|\n|        2| 2019|     6|\n|        2| 2020|     1|\n\n</div>\n:::\n:::\n\n\n\n-   What is `items`? <select class='webex-select'><option value='blank'></option><option value='x'>Observation</option><option value='answer'>Variable</option><option value='x'>Value</option></select>\n-   How many observations are there in this dataset? <input class='webex-solveme nospaces' size='1' data-answer='[\"6\"]'/>\n-   What is `8`? <select class='webex-select'><option value='blank'></option><option value='x'>Observation</option><option value='x'>Variable</option><option value='answer'>Value</option></select>\n\n\n<div class='webex-solution'><button>Explain these answers</button>\n\n\n-   There are three variables, `coach_id`, `year`, and `items`.\n-   There are six observations, one for each of two coaches for each of three years.\n-   `8` is a value because it is a single data point for one variable for one observation. \n\n\n</div>\n\n:::\n\n### Untidy data\n\nFirst, let's have a look at an example of a messy, or untidy, dataset. Each row has all of the data relating to one coach.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE)\n```\n:::\n\n::: {#tbl-untidy-data .cell layout-align=\"center\" tbl-cap='Untidy table'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id|itemsprice_2018 |itemsprice_2019 |itemsprice_2020 | totalprice_2018| totalprice_2019| totalprice_2020|\n|--------:|:---------------|:---------------|:---------------|---------------:|---------------:|---------------:|\n|        1|2 (3.91)        |8 (4.72)        |10 (5.59)       |            7.82|           37.76|           55.90|\n|        2|1 (3.91)        |6 (4.72)        |1 (5.59)        |            3.91|           28.32|            5.59|\n|        3|4 (3.91)        |5 (4.72)        |5 (5.59)        |           15.64|           23.60|           27.95|\n|        4|10 (3.91)       |1 (4.72)        |3 (5.59)        |           39.10|            4.72|           16.77|\n|        5|3 (3.91)        |9 (4.72)        |8 (5.59)        |           11.73|           42.48|           44.72|\n\n</div>\n:::\n:::\n\n\n* The `itemsprice_{year}` columns contain two values (number of items and price per item)\n* The `totalprice_{year}` columns contain the total amount spent by that coach that year, i.e., items * price.\n* There is data for three different years in the dataset.\n\nLet's say you wanted to calculate the total price per coach over the three years and the total number of items bought per coach. You can't perform mathematical operations on the `itemsprice_{year}` columns because they are <a href='https://psyteachr.github.io/glossary/c#character' target='_blank' class='glossary' title='A data type representing strings of text.'>character</a> <a href='https://psyteachr.github.io/glossary/d#data-type' target='_blank' class='glossary' title='The kind of data represented by an object.'>data types</a>.\n\nYou would probably normally use Excel to\n\n1.  split `itemsprice_2018` column into `item_2018` and `price_2018` columns\n2.  split `itemsprice_2019` column into `item_2019` and `price_2019` columns\n3.  split `itemsprice_2020` column into `item_2018` and `price_2020` columns\n4.  add `item_2018 + item_2019 + item_2020` to get the total number of items bought per coach\n5.  add `totalprice_2018 + totalprice_2019 + totalprice_2020` to get the total price per coach\n\n::: {.callout-note .try}\nThink about how many steps in Excel this would be if there were 10 years in the table, or a different number of years each time you encountered data like this.\n:::\n\n### Tidy data\n\nThere are three rules for \"<a href='https://psyteachr.github.io/glossary/t#tidy-data' target='_blank' class='glossary' title='A format for data that maps the meaning onto the structure.'>tidy data</a>, which is data in a format that makes it easier to combine data from different tables, create summary tables, and visualise your data.\n\n-   Each observation must have its own row\n-   Each variable must have its own column\n-   Each value must have its own cell\n\nThis is the tidy version:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy_data <- read_csv(\"data/tidy_data.csv\", show_col_types = FALSE)\n```\n:::\n\n::: {#tbl-tidy-data .cell layout-align=\"center\" tbl-cap='Tidy table'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year| items| price_per_item| totalprice|\n|--------:|----:|-----:|--------------:|----------:|\n|        1| 2018|     2|           3.91|       7.82|\n|        1| 2019|     8|           4.72|      37.76|\n|        1| 2020|    10|           5.59|      55.90|\n|        2| 2018|     1|           3.91|       3.91|\n|        2| 2019|     6|           4.72|      28.32|\n|        2| 2020|     1|           5.59|       5.59|\n|        3| 2018|     4|           3.91|      15.64|\n|        3| 2019|     5|           4.72|      23.60|\n|        3| 2020|     5|           5.59|      27.95|\n|        4| 2018|    10|           3.91|      39.10|\n|        4| 2019|     1|           4.72|       4.72|\n|        4| 2020|     3|           5.59|      16.77|\n|        5| 2018|     3|           3.91|      11.73|\n|        5| 2019|     9|           4.72|      42.48|\n|        5| 2020|     8|           5.59|      44.72|\n\n</div>\n:::\n:::\n\n\n* There are now five variables (columns) because there are five different types of information we have for each observation: the coach id, the year, number of items bought, price per item, and total price. \n* Each row is a coach's orders in a particular year. \n* The number of items (`items`) and price per item (`price_per_item`) are in separate columns, so now you can perform mathematical operations on them.\n\nTo calculate the total price per coach over the three years and the total number of items bought per coach in R, you could then:\n\n1.  group the table by coach_id\n2.  sum the `items` column to get the total number of items bought per coach\n3.  sum the `totalprice` column to get the total price per coach\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy_data %>%\n  group_by(coach_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| total_items| total_price|\n|--------:|-----------:|-----------:|\n|        1|          20|      101.48|\n|        2|           8|       37.82|\n|        3|          14|       67.19|\n|        4|          14|       60.59|\n|        5|          20|       98.93|\n\n</div>\n:::\n:::\n\n\n\n::: {.callout-note}\nIf there were 10 years in the table, or a different number of years each time you encountered data like this, the code for producing the tables and plots above never changes.\n:::\n\nIf you have control over how the data are recorded, it will make your life easier to record it in a tidy format from the start. However, we don't always have control, so this class will also teach you how to convert untidy tables into tidy tables.\n\n## Reshaping Data\n\nData tables can be in <a href='https://psyteachr.github.io/glossary/w#wide' target='_blank' class='glossary' title='A data format where all of the observations about one subject are in the same row'>wide</a> format or <a href='https://psyteachr.github.io/glossary/l#long' target='_blank' class='glossary' title='A data format where each observation is on a separate row'>long</a> format (or a mix of the two). Wide data are where all of the observations about one thing are in the same row, while long data are where each observation is on a separate row. You often need to convert between these formats to do different types of summaries or visualisation. You may have done something similar using pivot tables in Excel.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Converting between wide and long formats using pivot tables in Excel.](images/tidy/excel_pivot_table.png){fig-align='center' width=100%}\n:::\n:::\n\n\nIt can be easier to just consider one type of measurement at a time. `untidy_data` has two types of measurements, total price and price per item. Let's look at just the `totalprice` data first. \n\nWe can select just the columns we want using the `dplyr::select()` function. This function's first argument is the data table you want to select from, then each argument after that is either the name of a column in that table, or `new_name = old_name`. This is a useful function for changing the column names and order of columns, as well as selecting a subset of columns. \n\n::: {.callout-warning}\nNote that because the names of the columns are numbers, they need to be wrapped in backticks otherwise you'll get an error like:\n```\nError: unexpected '=' in:\n\"  coach_id, \n  2018 =\"\n```\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# select just the coach ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  coach_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n```\n:::\n\n::: {#tbl-wide-data .cell layout-align=\"center\" tbl-cap='Wide table'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id|  2018|  2019|  2020|\n|--------:|-----:|-----:|-----:|\n|        1|  7.82| 37.76| 55.90|\n|        2|  3.91| 28.32|  5.59|\n|        3| 15.64| 23.60| 27.95|\n|        4| 39.10|  4.72| 16.77|\n|        5| 11.73| 42.48| 44.72|\n\n</div>\n:::\n:::\n\n\nThis is in wide format, where each row is a coach, and represents the data from several years. This is a really intuitive way for humans to read a table, but it's not as easy to process with code.\n\nThe same data can be represented in a long format by creating a new column that specifies what `year` the observation is from and a new column that specifies the `totalprice` of that observation. This is easier to use to make summaries and plots.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = `2018`:`2020`,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n```\n:::\n\n::: {#tbl-long-data .cell layout-align=\"center\" tbl-cap='Long table'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id|year | totalprice|\n|--------:|:----|----------:|\n|        1|2018 |       7.82|\n|        1|2019 |      37.76|\n|        1|2020 |      55.90|\n|        2|2018 |       3.91|\n|        2|2019 |      28.32|\n|        2|2020 |       5.59|\n|        3|2018 |      15.64|\n|        3|2019 |      23.60|\n|        3|2020 |      27.95|\n|        4|2018 |      39.10|\n|        4|2019 |       4.72|\n|        4|2020 |      16.77|\n|        5|2018 |      11.73|\n|        5|2019 |      42.48|\n|        5|2020 |      44.72|\n\n</div>\n:::\n:::\n\n\n\nIt also makes it very easy to use with `ggplot()`. Run the following plot, and consider how you'd make it with the wide version (it is likely impossible).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![Most plots are easier to make with data in a long format.](08-tidy_files/figure-html/long-ggplot-demo-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n::: {.callout-note .try}\nCreate a long version of the following table of how many million followers each athlete has on different social media platforms. You don't need to use code, just sketch it in a notebook or make a table in a spreadsheet.\n\n| athlete            | X       | instagram |\n|:-------------------|:--------|:----------|\n| Serena Williams    | 10.4    | 17.3      |\n| Usain Bolt         | 4.7     | 13.8      |\n| Simone Biles       | 1.6     | 7.1       |\n\n\n<div class='webex-solution'><button>Answer</button>\n\nYour answer doesn't need to have the same column headers or be in the same order.\n\n| account            | social_media | followers |\n|:-------------------|:-------------|:----------|\n| Serena Williams    | X            | 10.4      |\n| Serena Williams    | instagram    | 17.3      |\n| Usain Bolt         | X            | 4.7       |\n| Usain Bolt         | instagram    | 13.8      |\n| Simone Biles       | X            | 1.6       |\n| Simone Biles       | instagram    | 7.1       |\n\n\n</div>\n\n:::\n\n::: {.callout-note}\nIf you're a researcher and you're used to thinking about IVs and DVs, you may find it easier to remember that each IV and DV should have its own column, rather than a column for each level of the IV. \n:::\n\n\nThe pivot functions allow you to transform a data table from wide to long or long to wide.\n\n### Wide to long\n\nThe function `pivot_longer()` converts a wide data table to a longer format by converting the headers from specified columns into the values of new columns, and combining the values of those columns into a new condensed column.\n\nThis function has several arguments:\n\n-   `cols`: the columns you want to make long; you can refer to them by their names, like `` c(`2018`, `2019`, `2020`) `` or `` `2018`:`2020` `` or by their numbers, like `c(2, 3, 4)` or `2:4`\n-   `names_to`: what you want to call the new column that the `cols` column header names will go into\n-   `values_to`: what you want to call the new column that contains the values in the `cols`\n\nWith the pivot functions, it can be easier to show than tell - run the below code and then compare `wide_totalprice` with `long_totalprice` and the pivot code and try to map each argument to what has changed. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice, \n  cols = `2018`:`2020`, # columns to make long \n  names_to = \"year\", # new column name for headers\n  values_to = \"totalprice\" # new column name for values\n)\n```\n:::\n\n\n\n### Long to wide\n\nWe can also go from long to wide format using the `pivot_wider()` function. Instead of returning to the original table with a row for each coach and a column for each year, this new wide table will have a row for each year and a column for each coach. It can be awkward to have numbers for column names, so we use `names_prefix` to add \"C_\" before each new column name.\n\n-   `id_cols`: the column(s) that uniquely identify each new row\n-   `names_from`: the column(s) that contain your new column headers\n-   `names_prefix`: A prefix to add to the values in the names column\n-   `values_from`: the column that contains the values for the new columns\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwide_by_coach <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = coach_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\n```\n:::\n\n::: {#tbl-wide-pivot .cell layout-align=\"center\" tbl-cap='Data made wider with pivot_wider()'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|year |   C_1|   C_2|   C_3|   C_4|   C_5|\n|:----|-----:|-----:|-----:|-----:|-----:|\n|2018 |  7.82|  3.91| 15.64| 39.10| 11.73|\n|2019 | 37.76| 28.32| 23.60|  4.72| 42.48|\n|2020 | 55.90|  5.59| 27.95| 16.77| 44.72|\n\n</div>\n:::\n:::\n\n\n\n## Multi-step tidying {#sec-multistep}\n\nYou often need to go from wide, to long, to an intermediate shape in order to get your data into a format that is useful for plotting, where there is a column for each variable that you want to represent with an aesthetic.\n\nOur full `untidy_data` table has seven columns: a coach ID, three columns for `itemsprice` and 3 columns for `totalprice`.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id|itemsprice_2018 |itemsprice_2019 |itemsprice_2020 | totalprice_2018| totalprice_2019| totalprice_2020|\n|--------:|:---------------|:---------------|:---------------|---------------:|---------------:|---------------:|\n|        1|2 (3.91)        |8 (4.72)        |10 (5.59)       |            7.82|           37.76|           55.90|\n|        2|1 (3.91)        |6 (4.72)        |1 (5.59)        |            3.91|           28.32|            5.59|\n|        3|4 (3.91)        |5 (4.72)        |5 (5.59)        |           15.64|           23.60|           27.95|\n|        4|10 (3.91)       |1 (4.72)        |3 (5.59)        |           39.10|            4.72|           16.77|\n|        5|3 (3.91)        |9 (4.72)        |8 (5.59)        |           11.73|           42.48|           44.72|\n\n</div>\n:::\n:::\n\n\nWe want to get it into the tidy format below where each row is an observation of one coach per year, with the columns of `coach_id`, `year`, `item`, `price_per_item` and `totalprice`. Before trying to reshape any dataset, you should be able to visualise what it will look like. Sketching out your tables on a piece of paper can really help make these transformations make sense.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year| items| price_per_item| totalprice|\n|--------:|----:|-----:|--------------:|----------:|\n|        1| 2018|     2|           3.91|       7.82|\n|        1| 2019|     8|           4.72|      37.76|\n|        1| 2020|    10|           5.59|      55.90|\n|        2| 2018|     1|           3.91|       3.91|\n|        2| 2019|     6|           4.72|      28.32|\n|        2| 2020|     1|           5.59|       5.59|\n|        3| 2018|     4|           3.91|      15.64|\n|        3| 2019|     5|           4.72|      23.60|\n|        3| 2020|     5|           5.59|      27.95|\n|        4| 2018|    10|           3.91|      39.10|\n|        4| 2019|     1|           4.72|       4.72|\n|        4| 2020|     3|           5.59|      16.77|\n|        5| 2018|     3|           3.91|      11.73|\n|        5| 2019|     9|           4.72|      42.48|\n|        5| 2020|     8|           5.59|      44.72|\n\n</div>\n:::\n:::\n\n\n### One observation per row\n\nThe original table has observations from each coach over three years. This is too many observations per row, so first we'll start by making the table long. We need to make 6 rows for each coach, one for each category (item price/total price) and year combination, with columns for the coach ID, year, category, and value.\n\nBecause we'll be combining columns with numeric (`totalprice`) and character (`itemsprice`) data, we need to make the new `value` column a character data type using `values_transform`, since numbers can be represented as characters (like `\"3.5\"`), but character strings can't be represented as numbers.\n\nThe argument `names_sep` is set to the character string used to join names if `names_from` is more than one column. Alternatively, you can use the argument `names_pattern`, which can be more powerful but also a little harder to understand how to set up.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\n```\n:::\n\n::: {#tbl-wide-to-long .cell layout-align=\"center\" tbl-cap='Untidy data converted from wide to long.'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id|category   | year|value     |\n|--------:|:----------|----:|:---------|\n|        1|itemsprice | 2018|2 (3.91)  |\n|        1|itemsprice | 2019|8 (4.72)  |\n|        1|itemsprice | 2020|10 (5.59) |\n|        1|totalprice | 2018|7.82      |\n|        1|totalprice | 2019|37.76     |\n|        1|totalprice | 2020|55.9      |\n|        2|itemsprice | 2018|1 (3.91)  |\n|        2|itemsprice | 2019|6 (4.72)  |\n|        2|itemsprice | 2020|1 (5.59)  |\n|        2|totalprice | 2018|3.91      |\n|        2|totalprice | 2019|28.32     |\n|        2|totalprice | 2020|5.59      |\n|        3|itemsprice | 2018|4 (3.91)  |\n|        3|itemsprice | 2019|5 (4.72)  |\n|        3|itemsprice | 2020|5 (5.59)  |\n|        3|totalprice | 2018|15.64     |\n|        3|totalprice | 2019|23.6      |\n|        3|totalprice | 2020|27.95     |\n|        4|itemsprice | 2018|10 (3.91) |\n|        4|itemsprice | 2019|1 (4.72)  |\n|        4|itemsprice | 2020|3 (5.59)  |\n|        4|totalprice | 2018|39.1      |\n|        4|totalprice | 2019|4.72      |\n|        4|totalprice | 2020|16.77     |\n|        5|itemsprice | 2018|3 (3.91)  |\n|        5|itemsprice | 2019|9 (4.72)  |\n|        5|itemsprice | 2020|8 (5.59)  |\n|        5|totalprice | 2018|11.73     |\n|        5|totalprice | 2019|42.48     |\n|        5|totalprice | 2020|44.72     |\n\n</div>\n:::\n:::\n\n\n\n### One variable per column\n\nNow this table is long, but not tidy. The `value` column contains data from two different variables. We need to make the table wider, but not as wide as before. We want to keep the `year` column and make new columns called `itemsprice` and `totalprice` with the relevant coach's `value` for that variable and year.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(coach_id, year),\n  names_from = category,\n  values_from = value\n)\n```\n:::\n\n::: {#tbl-intermediate .cell layout-align=\"center\" tbl-cap='Data converted from long to an intermediate shape.'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year|itemsprice |totalprice |\n|--------:|----:|:----------|:----------|\n|        1| 2018|2 (3.91)   |7.82       |\n|        1| 2019|8 (4.72)   |37.76      |\n|        1| 2020|10 (5.59)  |55.9       |\n|        2| 2018|1 (3.91)   |3.91       |\n|        2| 2019|6 (4.72)   |28.32      |\n|        2| 2020|1 (5.59)   |5.59       |\n|        3| 2018|4 (3.91)   |15.64      |\n|        3| 2019|5 (4.72)   |23.6       |\n|        3| 2020|5 (5.59)   |27.95      |\n|        4| 2018|10 (3.91)  |39.1       |\n|        4| 2019|1 (4.72)   |4.72       |\n|        4| 2020|3 (5.59)   |16.77      |\n|        5| 2018|3 (3.91)   |11.73      |\n|        5| 2019|9 (4.72)   |42.48      |\n|        5| 2020|8 (5.59)   |44.72      |\n\n</div>\n:::\n:::\n\n\n\n::: {.callout-note}\nTechinically, you can skip setting the `id_cols` argument, because all of the columns apart from the `names_from` column and the `values_from` column identify the observation (e.g., each observation is identified by the unique combination of `coach_id` and `year`). You only have to set the `id_cols` argument when this is not the case.\n:::\n\n### One value per cell\n\nThe cells in the `itemsprice` column actually contain two different values. We need to split it into two columns for the variables `items`, and `price_per_item`. You can split a column into parts with the function `tidyr::separate()`. There is a space between the number of items and the brackets, so we can split it along this space -- if you are in charge of how data is stored, ensuring data is entered consistently makes this much easier.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove the old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\n```\n:::\n\n::: {#tbl-split .cell layout-align=\"center\" tbl-cap='The itemsprice column split into items and price_per_item using separate().'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year| items|price_per_item |totalprice |\n|--------:|----:|-----:|:--------------|:----------|\n|        1| 2018|     2|(3.91)         |7.82       |\n|        1| 2019|     8|(4.72)         |37.76      |\n|        1| 2020|    10|(5.59)         |55.9       |\n|        2| 2018|     1|(3.91)         |3.91       |\n|        2| 2019|     6|(4.72)         |28.32      |\n|        2| 2020|     1|(5.59)         |5.59       |\n|        3| 2018|     4|(3.91)         |15.64      |\n|        3| 2019|     5|(4.72)         |23.6       |\n|        3| 2020|     5|(5.59)         |27.95      |\n|        4| 2018|    10|(3.91)         |39.1       |\n|        4| 2019|     1|(4.72)         |4.72       |\n|        4| 2020|     3|(5.59)         |16.77      |\n|        5| 2018|     3|(3.91)         |11.73      |\n|        5| 2019|     9|(4.72)         |42.48      |\n|        5| 2020|     8|(5.59)         |44.72      |\n\n</div>\n:::\n:::\n\n\n::: {.callout-warning}\nIf the new columns should have a different <a href='https://psyteachr.github.io/glossary/d#data-type' target='_blank' class='glossary' title='The kind of data represented by an object.'>data type</a> from the old column, set `convert = TRUE` to automatically fix them. This is common when you have columns that contain multiple numbers, separated by commas or semicolons. These are character types before they are separated, but should be numeric types after so that you can do mathematical operations like sum them.\n:::\n\n### Altering data\n\nThe column `price_per_item` is still a character column because it has parentheses. There are a few ways to fix this. You can use the `dplyr::mutate()` function to change a column or add a new one.\n\nHere, we'll use `stringr::str_replace_all()` to replace all of the \"(\" and \")\" with \"\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)\n```\n:::\n\n::: {#tbl-mutate .cell layout-align=\"center\" tbl-cap='Mutating data to remove the parentheses from price_per_item.'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| coach_id| year| items|price_per_item |totalprice |\n|--------:|----:|-----:|:--------------|:----------|\n|        1| 2018|     2|3.91           |7.82       |\n|        1| 2019|     8|4.72           |37.76      |\n|        1| 2020|    10|5.59           |55.9       |\n|        2| 2018|     1|3.91           |3.91       |\n|        2| 2019|     6|4.72           |28.32      |\n|        2| 2020|     1|5.59           |5.59       |\n|        3| 2018|     4|3.91           |15.64      |\n|        3| 2019|     5|4.72           |23.6       |\n|        3| 2020|     5|5.59           |27.95      |\n|        4| 2018|    10|3.91           |39.1       |\n|        4| 2019|     1|4.72           |4.72       |\n|        4| 2020|     3|5.59           |16.77      |\n|        5| 2018|     3|3.91           |11.73      |\n|        5| 2019|     9|4.72           |42.48      |\n|        5| 2020|     8|5.59           |44.72      |\n\n</div>\n:::\n:::\n\n\n\n### Fixing data types\n\nThe `price_per_item` and `totalprice` columns are still characters, so you can't do things like calculate the sum of `totalprice`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# check the data types\nglimpse(mutated_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 15\nColumns: 5\n$ coach_id       <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <chr> \"3.91\", \"4.72\", \"5.59\", \"3.91\", \"4.72\", \"5.59\", \"3.91\",…\n$ totalprice     <chr> \"7.82\", \"37.76\", \"55.9\", \"3.91\", \"28.32\", \"5.59\", \"15.6…\n```\n\n\n:::\n:::\n\n\nOnce the data are clean and tidy, you can fix all of your column data types in one step using `readr::type_convert()`. This is good practice when you've finished cleaning a data set. If the automatic type detection doesn't work as expected, this usually means that you still have non-numeric characters in a column where there were only supposed to be numbers. You can also manually set the column types in the same way as for `readr::read_csv()` (see @sec-data)).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n\n# check the data types\nglimpse(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 15\nColumns: 5\n$ coach_id       <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n```\n\n\n:::\n:::\n\n\n## Pipes {#sec-pipes}\n\n::: {style=\"width: 200px; float: right;\"}\n<img src=\"images/tidy/pipe_sticker.png\" style=\"width: 100%\"/>\n:::\n\nWe've already introduced pipes in @sec-pipes-first but this type of data processing is where they really start to shine, as they can significantly reduce the amount of code you write.  \n\nAs a recap, a pipe takes the result of the previous function and sends it to the next function as its first argument, which means that you do not need to create intermediate objects. Below is all the code we've used in this chapter, and in the process we created five objects. This can get very confusing in longer scripts.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", \n                        show_col_types = FALSE)\n\nlonger_data <- pivot_longer(\n  data = untidy_data,\n  cols = itemsprice_2018:totalprice_2020,\n  names_to = c(\"category\", \"year\"),\n  names_sep = \"_\", \n  values_to = \"value\", \n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n) \n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(coach_id, year),\n  names_from = category,\n  values_from = value\n)\n\nsplit_data <- separate(\n  data = wider_data,\n  col = itemsprice,\n  into = c(\"items\", \"price_per_item\"),\n  sep = \" \", \n  remove = TRUE, \n  convert = TRUE\n) \n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n) \n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE\n)\n```\n:::\n\n\n::: {.callout-warning}\nYou *can* give each object the same name and keep replacing the old data object with the new one at each step. This will keep your environment clean, but it makes debugging code much harder.\n:::\n\nFor longer series of steps like the one above, using pipes can eliminate many intermediate objects. This also makes it easier to add an intermediate step to your process without having to think of a new table name and edit the table input to the next step (which is really easy to accidentally miss).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy_data <- read_csv(file = \"data/untidy_data.csv\",\n                      show_col_types = FALSE) %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(coach_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )\n```\n:::\n\n\nYou can read the code above like this:\n\n1.  Read the data with `read_csv()`\n\n    -   `file`: from the file at r path(\"data/untidy_data.csv\")\\`,\n    -   `show_col_types`: do not show the column types message; **and then**\n\n2.  Reshape the data longer with `pivot_longer()`\n\n    -   `cols`: take the columns from `itemsprice_2018` to `totalprice_2020`,\n    -   `names_to`: create new columns called \"category\" and \"year\" from the `cols` header names,\n    -   `names_sep`: separate the column names using \"\\_\"\n    -   `values_to`: create a new column called \"value\" from the `cols` values,\n    -   `names_transform`: transform the `year` column to integers,\n    -   `values_transform`: transform the `value` column to characters; **and then**\n\n3.  Reshape the data wider with `pivot_wider()`\n\n    -   `id_cols`: each row should be an observation of a unique `coach_id` and `year`,\n    -   `names_from`: get the new column names from the values in the `category` column,\n    -   `values_from`: get the new column values from the values in the `value` column; **and then**\n\n4.  Split multiple values in the same column with `separate()`\n\n    -   `col`: separate the column `itemsprice`,\n    -   `into`: into new columns called \"items\" and \"price_per_item\",\n    -   `sep`: separate the values at each \" \",\n    -   `remove`: do remove the old column,\n    -   `convert`: do convert the new columns into the right data types; **and then**\n\n5.  Change a column with `mutate()`\n\n    -   `price_per_item`: replace the existing column `price_per_item` with the result of a search and replace with `str_replace_all()`:\n\n        -   `string`: the strings to modify come from the `price_per_item` columns,\n        -   `pattern`: search for left or right parentheses,\n        -   `replacement`: replace them with \"\"; **and then**,\n\n6.  Fix data types with `type_convert()`\n\n    -   `trim_ws`: remove spaces, tabs, and line breaks from the start and end of each value\n\nDon't feel like you always need to get all of your data wrangling code into a single pipeline. You should make intermediate objects whenever you need to break up your code because it's getting too complicated or if you need to debug something.\n\n::: {.callout-note}\nYou can debug a pipe by highlighting from the beginning to just before the pipe you want to stop at. Try this by highlighting from `data <-` to the end of the `separate` function and typing command-enter (mac) or control-enter (PC). What does `data` look like now?\n:::\n\n## Exercises\n\nLet's try a couple of examples. \n\n* Save your current Markdown, close it, and open a new Rmd named \"Patient_survey\".\n* Download a copy of [wide_exercise-1.csv](https://healthteachr.github.io/data/wide_exercise-1.csv) and [wide_exercise-2.csv](https://healthteachr.github.io/data/wide_exercise-2.csv) into your data folder.\n* In the set-up code chunk, load the <pkg>tidyverse</pkg> then load the two data files in using `read_csv()` and name the objects `wide1` and `wide2`\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nlibrary(tidyverse)\nwide1 <- read_csv(\"data/wide_exercise-1.csv\")\nwide2 <- read_csv(\"data/wide_exercise-2.csv\")\n```\n\n:::\n:::\n\n\nThe two datasets represent simulated data from a patient satisfaction survey. We'll do them one at a time, as they differ in complexity.\n\n### Survey 1\n\n`wide1` has data from 50 patients who were asked five questions about their most recent experience at a health centre. The results from this questionnaire are typically reported as a single overall satisfaction score, which is calculated by taking the mean of the five responses. Additionally, the survey also records whether the patient was attending the clinic for the first time, or as a repeat patient. \n\n* Use your method of choice to look at the dataset and familiarise yourself with its structure and data. \n\nAs noted, it's important to think through what your tidied data should look like. Often, the problem with data wrangling in R isn't actually the code, it's a lack of understanding of the data that's being worked on. \n\n1. How many **variables** should the long-form version of `wide` have? <input class='webex-solveme nospaces' size='1' data-answer='[\"4\"]'/>\n2. How many **observations** should the long-form version of `wide1` have? <input class='webex-solveme nospaces' size='3' data-answer='[\"250\"]'/>\n\n\n<div class='webex-solution'><button>Explain these answers</button>\n\n\n1. There should be four variables, as there are 4 types of data: patient id, whether they are a repeat patient, the question they were asked, and their response.\n2. There will be 250 observations or rows of data because each patient will have 5 rows of data (one per question) and there are 50 patients (50 * 5 = 250).\n\n\n</div>\n\n\n### Tidy 1\n\nTransform `wide1` to long-form using `pivot_longer()` and store it in an object named `tidy1`\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\ntidy1 <- wide1 %>%\n  pivot_longer(cols = q1:q5,\n               names_to = \"question\", \n               values_to = \"response\")\n```\n\n:::\n:::\n\n\n\n### Survey 2\n\n`wide2` also has data from 50 patients, however, there are now two measures included in the questionnaire. There are still five questions that relate to satisfaction, but there are also five questions that relate to whether the patient would recommend the medical practice to a friend. Both measures are typically reported by calculating an overall mean for each of the five items. \n\n* Use your method of choice to look at the dataset and familiarise yourself with its structure and data. \n\nThis is not as simple as the first exercise because there's actually two potential ways you might tidy this data, depending on what you want to do with it and how you conceptualise the two different measurements. It's important to recognise that many of your coding problems will not have just one solution.\n\n#### Tidy 2a\n\nFor the first option, we're going to treat the \"satisfaction\" and \"recommendation\" measurements as two categories of the same variable. This will be a fully long-form data set with five variables `id`, `repeat_patient`, `question` (the question number), `category` (whether it's `sat` or `rec`), and `response` (the numerical rating). \n\n* How many **observations** should the fully long-form version of `wide2` have? <input class='webex-solveme nospaces' size='3' data-answer='[\"500\"]'/>\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\nThere will be 500 rows of data because each participant will have 10 rows: 5 for the satisfaction questions and five for the recommendation questions.\n\n\n</div>\n\n\nTransform `wide2` to full long-form using `pivot_longer()` and store it in an object named `tidy2a`.\n\nThis exercise requires multiple steps and you may need to look at the help documentation.\n\n\n<div class='webex-solution'><button>Hint 1</button>\n\n\n`data %>% pivot_longer() %>% separate()`\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 2</button>\n\n\n`into  = c(\"col1\", \"col2\")`\n\n\n</div>\n\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\ntidy2a <- wide2 %>%\n  pivot_longer(cols = q1_sat:q5_rec,\n               names_to = \"question\", \n               values_to = \"response\") %>%\n  separate(col = \"question\", into = c(\"question\", \"category\"))\n```\n\n:::\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='Alternative solution'}\n::: {.callout-note collapse='true'}\n## Alternative solution\n\n```{.r .cell-code}\n# combine pivot_longer and separate by setting two values for names_to\n# must include names_sep to determine how to separate the column names\ntidy2a <- wide2 %>%\n  pivot_longer(cols = q1_sat:q5_rec,\n               names_to = c(\"question\", \"category\"), \n               names_sep = \"_\",\n               values_to = \"response\")\n```\n\n:::\n:::\n\n\n#### Tidy 2b\n\nThe second option is to treat the satisfaction and recommendation scores as two distinct variables. This only makes sense if the satisfaction and recommendation scores for each question number are related to each other (e.g., q1 is about the same thing for both questions), making them part of the same observation.\n\nThis version should also have five variables, but it won't be fully long-form, it'll be a slight mix of the two that we're going to call \"semi-long\". The variables in the semi-long version will be `id`, `repeat`, `question` (the question number), `sat` (the response for the satisfaction question), and `rec` (the response for the recommendation question). \n\n* How many **observations** should the semi-long version of `wide2` have? <input class='webex-solveme nospaces' size='3' data-answer='[\"250\"]'/>\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\nThere will be 250 rows of data because, just like `tidy1`, each participant will have 5 rows, one for each of the five questions. The different responses to the satisfaction and recommendation questions are in different variables. \n\n\n</div>\n\n\nThis also takes multiple steps.\n\n\n<div class='webex-solution'><button>Hint 1</button>\n\n\nYou can reuse the code from `tidy2a`, you just need to add on an extra line that makes the data slightly wider.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Hint 2</button>\n\n\n`data %>% pivot_longer() %>% separate() %>% pivot_wider()`\n\n\n</div>\n\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\ntidy2b <- wide2 %>%\n  pivot_longer(cols = q1_sat:q5_rec,\n               names_to = \"question\", \n               values_to = \"response\") %>%\n  separate(col = \"question\", into = c(\"question\", \"category\")) %>%\n  pivot_wider(names_from = \"category\", values_from = \"response\")\n```\n\n:::\n:::\n\n\n### Analysis and visualisation\n\nUsing `group_by()` and `summarise()`, calculate the mean score for each participant for both satisfaction and recommendation. Do this for both versions of the dataset so that you can see how the structure of the dataset changes the approach you need to take.\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\ntidy2a %>%\n  group_by(id, category) %>%\n  summarise(mean = mean(response),\n            .groups = \"drop\")\n\ntidy2b %>%\n  group_by(id) %>%\n  summarise(mean_satisfaction = mean(sat),\n            mean_rec = mean(rec))\n```\n\n:::\n:::\n\n\nReplicate the following:\n\n#### Plot 1\n\nScatterplot showing the relationship between satisfaction and recommendation scores, by whether the patient is a repeat patient.\n\n\n<div class='webex-solution'><button>Hint</button>\n\n\n`geom_jitter()`\n\n\n</div>\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-tidy_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nggplot(tidy2b, aes(x = sat, y = rec, colour = repeat_patient)) +\n  geom_jitter() +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Satisfaction score\", y = \"Recommendation score\", title = \"Satisfaction and recommendation scores\") +\n  theme_classic()\n```\n\n:::\n:::\n\n\n\n#### Plot 2\n\nBoxplots showing satisfaction and recommends scores for new and repeat patients separately.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-tidy_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nggplot(tidy2a, aes(x = repeat_patient, y = response, fill = repeat_patient)) +\n  geom_boxplot(show.legend = FALSE) +\n  facet_wrap(~category)+\n  theme_bw() +\n  scale_fill_brewer(palette = \"Dark2\")\n```\n\n:::\n:::\n\n\n#### Plot 3\n\nHistogram showing the distribution of all responses, across questions and categories.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-tidy_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nggplot(tidy2a, aes(x = response)) +\n  geom_histogram(binwidth = 1, colour = \"black\", fill = \"Grey\") +\n  labs(x = \"Responses across all questions and categories\") +\n  theme_bw()\n```\n\n:::\n:::\n\n\n### Your data\n\nFinally, find a wide-form dataset of your own and try and tidy it into long-form. If you get stuck or you just want to check your solution, post it on Teams - just remember to be careful about sharing confidential data if it's your own dataset. \n\nIf your head hurts a bit at this point, rest assured it's absolutely normal. As we said at the start, reshaping and tidying data is a conceptual leap and there's no shortcut to the fact it just takes a bit of time and practice with different datasets - you will get there eventually!\n\n## Glossary {#sec-glossary-tidy}\n\n\n::: {.cell layout-align=\"center\"}\n\n|term        |definition                                                                                                                                                                           |\n|:-----------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|character   |A data type representing strings of text.                                                                                                                                            |\n|data type   |The kind of data represented by an object.                                                                                                                                           |\n|long        |A data format where each observation is on a separate row                                                                                                                            |\n|observation |All of the data about a single trial or question.                                                                                                                                    |\n|tidy data   |A format for data that maps the meaning onto the structure.                                                                                                                          |\n|value       |A single number or piece of data.                                                                                                                                                    |\n|variable    |(coding): A word that identifies and stores the value of some data for later use; (stats): An attribute or characteristic of an observation that you can measure, count, or describe |\n|wide        |A data format where all of the observations about one subject are in the same row                                                                                                    |\n:::\n\n\n## Further resources {#sec-resources-tidy}\n\n-   [Data tidying cheat sheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/tidyr.pdf)\n-   [Tidy Data](http://vita.had.co.nz/papers/tidy-data.html)\n-   [Chapter 12: Tidy Data](http://r4ds.had.co.nz/tidy-data.html) in *R for Data Science*\n-   [Chapter 18: Pipes](http://r4ds.had.co.nz/pipes.html) in *R for Data Science*\n",
    "supporting": [
      "08-tidy_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}