{
  "hash": "12fb0ea921f6f4b7b78f53decfdc34a1",
  "result": {
    "engine": "knitr",
    "markdown": "---\neditor: \n  markdown: \n    wrap: 72\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n# Reports with R Markdown {#sec-reports}\n\n## Intended Learning Outcomes {#sec-ilo-reports .unnumbered}\n\n-   Be able to structure a project\n-   Be able to knit a simple reproducible report with R Markdown\n-   Be able to create code chunks, tables, images, and inline R in an R\n    Markdown document\n\nDownload the [R Markdown Cheat\nSheet](https://www.rstudio.org/links/r_markdown_cheat_sheet){download=\"\"}\n\n## Walkthrough video {#sec-walkthrough-reports .unnumbered}\n\nThere is a walkthrough video of this chapter available via\n[Echo360.](https://echo360.org.uk/media/6b6c1c8f-c24f-44c1-9e43-988fe577ce5b/public)\nPlease note that there may have been minor edits to the book since the\nvideo was recorded. Where there are differences, the book should always\ntake precedence.\n\n## Setup {#sec-setup-reports}\n\nFor reference, here are the packages we will use in this chapter. You\nmay need to install them, as explained in @sec-install-package, if\nrunning the code below in the console pane gives you the error\n`Error in library(package_name) : there is no package called 'packagename'`.\n\n\n::: {.cell layout-align=\"center\" filename='Chapter packages'}\n\n```{.r .cell-code}\nlibrary(timechange)\nlibrary(tidyverse)  # various data manipulation functions\nlibrary(knitr)      # for rendering a report from a script\nlibrary(rmarkdown)  # for using R markdown\nlibrary(kableExtra) # for styling tables\n```\n:::\n\n\n## Organising a project {#sec-projects}\n\nBefore we write any code, first, we need to get organised.\n<a href='https://psyteachr.github.io/glossary/p#project' target='_blank' class='glossary' title='A way to organise related files in RStudio'>Projects</a> in RStudio are a way to group all\nthe files you need for one project. Most projects include\n<a href='https://psyteachr.github.io/glossary/s#script' target='_blank' class='glossary' title='A plain-text file that contains commands in a coding language, such as R.'>scripts</a>, data files, and output files like the\nPDF report created by the script or images.\n\n### Default working directory\n\nFirst, make a new <a href='https://psyteachr.github.io/glossary/d#directory' target='_blank' class='glossary' title='A collection or “folder” of files on a computer.'>directory</a> (i.e., folder) on your\ncomputer where you will keep all of your R projects. Name it something\nlike \"R-projects\" (avoid spaces and other special characters). Make sure\nyou know how to get to this directory using your computer's Finder or\nExplorer.\n\n::: callout-caution\n## Avoid networked drives\n\nIf possible, don't use a network or cloud drive (e.g., OneDrive or\nDropbox), as this can sometimes cause problems. If you're working from a\nnetworked drive and you are having issues, a helpful test is to try\nmoving your project folder to the desktop to see if that solves the\nproblem.\n:::\n\nNext, open <if>Tools \\> Global Options...</if>, navigate to the\n<if>General</if> pane, and set the \"Default working directory (when not\nin a project)\" to this directory. Now, if you're not working in a\nproject, any files or images you make will be saved in this\n<a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>.\n\n::: callout-caution\n## Avoid long path names\n\nOn some versions of Windows 10 and 11, it can cause problems if path\nnames are longer than 260 characters. Set your default working directory\nto a path with a length well below that to avoid problems when R creates\ntemporary files while rendering a report. If you are having issues, a\nhelpful test is to try moving your project folder to the desktop to see\nif that solves the problem as this will likely have a much short path\nname than most other folders on your computer.\n:::\n\nYou can set the working directory to another location manually with menu\ncommands: <if>Session \\> Set Working Directory \\> Choose\nDirectory...</if> However, there's a better way of organising your files\nby using Projects in RStudio.\n\n### Start a Project {#sec-project-start}\n\nStart by making a directory inside your default project directory where\nyou will keep all of your materials for this class; we'd suggest naming\nit something like `ADS-24`.\n\nTo create a new project for the work we'll do in this chapter:\n\n-   <if>File \\> New Project...</if>\n-   Name the project <code class='path'>02-reports</code>\n-   Save it inside the `ADS-24` directory\n\nRStudio will restart itself and open with this new project directory as\nthe working directory.\n\n::: {#fig-new-proj layout-ncol=\"3\"}\n![](images/reports/new_proj_1.png)\n\n![](images/reports/new_proj_2.png)\n\n![](images/reports/new_proj_3.png)\n\nStarting a new project.\n:::\n\nClick on the Files tab in the lower right pane to see the contents of\nthe project directory. You will see a file called `02-reports.Rproj`,\nwhich is a file that contains all of the project information. When\nyou're in the Finder/Explorer, you can double-click on it to open up the\nproject.\n\n::: callout-note\n## Dot files\n\nDepending on your settings, you may also see a directory called\n`.Rproj.user`, which contains your specific user settings. You can\nignore this and other \"invisible\" files that start with a full stop.\n:::\n\n::: callout-caution\n## Don't nest projects\n\nDon't ever save a new project **inside** another project directory. This\ncan cause some hard-to-resolve problems.\n:::\n\n### Naming Things {#sec-naming}\n\nBefore we start creating new files, it's important to review how to name\nyour files. This might seem a bit pedantic, but following clear naming\nrules so that both people and computers can easily find things will make\nyour life much easier in the long run. Here are some important\nprinciples:\n\n-   file and directory names should only contain letters, numbers,\n    dashes, and underscores, with a full stop (`.`) between the file\n    name and <a href='https://psyteachr.github.io/glossary/e#extension' target='_blank' class='glossary' title='The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).'>extension</a> (that means no spaces!)\n-   be consistent with capitalisation (set a rule to make it easy to\n    remember, like always use lowercase)\n-   use underscores (`_`) to separate parts of the file name, like the\n    title and date, and dashes (`-`) to separate words in each part\n    (e.g., `physiology-report_2024-11.Rmd`)\n-   name files with a pattern that alphabetises in a sensible order and\n    makes it easy for you to find the file you're looking for\n-   prefix a file name with an underscore to move it to the top of the\n    list, or prefix all files with numbers to control their order\n\nFor example, these file names are a mess:\n\n-   <code class='path'>report.doc</code>\n-   <code class='path'>report final.doc</code>\n-   <code class='path'>Data (Athletes) 11-15.xls</code>\n-   <code class='path'>Athletes Data Nov 12.xls</code>\n-   <code class='path'>final report2.doc</code>\n-   <code class='path'>project notes.txt</code>\n-   <code class='path'>Rugby Data November 15.xls</code>\n\nHere is one way to structure them so that similar files have the same\nstructure and it's easy for a human to scan the list or to use code to\nfind relevant files. See if you can figure out what the last one should\nbe.\n\n-   <code class='path'>_project-notes.txt</code>\n-   <code class='path'>report_v1.doc</code>\n-   <code class='path'>report_v2.doc</code>\n-   <code class='path'>report_v3.doc</code>\n-   <code class='path'>data_athletes_2021-11-12.xls</code>\n-   <code class='path'>data_athletes_2021-11-15.xls</code>\n-   <select class='webex-select'><option value='blank'></option><option value=''>rugby-data_2021-11-15.xls</option><option value=''>data-rugby-2021_11_15.xls</option><option value='answer'>data_rugby_2021-11-15.xls</option><option value=''>data_2021-11-15_rugby.xls</option></select>\n\n::: {.callout-note .try}\n## Naming practice\n\nThink of other ways to name the files above. Look at some of your own\nproject files and see what you can improve.\n:::\n\n## R Markdown {#sec-rmarkdown}\n\nThroughout this course we will use <a href='https://psyteachr.github.io/glossary/r#r-markdown' target='_blank' class='glossary' title='The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.'>R Markdown</a> to create\nreproducible reports with a table of contents, text, tables, images, and\ncode. The text can be written using <a href='https://psyteachr.github.io/glossary/m#markdown' target='_blank' class='glossary' title='A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.'>markdown</a>, which is a\nway to specify formatting, such as headers, paragraphs, lists, bolding,\nand links.\n\n### New document\n\nTo open a new R Markdown document, click <if>File \\> New File \\> R\nMarkdown</if>. You will be prompted to give it a title; title it\n`Important Info`. You can also change the author name. Keep the output\nformat as HTML.\n\nOnce you've opened a new document be sure to save it by clicking\n<if>File \\> Save As...</if>. You should name this file `important_info`\n(if you are on a Mac and can see the file <a href='https://psyteachr.github.io/glossary/e#extension' target='_blank' class='glossary' title='The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).'>extension</a>,\nname it `important_info.Rmd`). This file will automatically be saved in\nyour project folder (i.e., your working directory) so you should now see\nthis file appear in your file viewer pane.\n\nWhen you first open a new R Markdown document you will see a bunch of\nwelcome text that looks like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R Markdown text](images/reports/markdown-default.png){#fig-markdown-default fig-align='center' width=100%}\n:::\n:::\n\n\nDo the following steps:\n\n-   Change the title to \"Important Information\" and the author to your\n    name\n-   Delete **everything** after the setup chunk\n-   Skip a line after the setup chunk and type \"\\## My info\" (with the\n    hashes but without the quotation marks); make sure there are no\n    spaces before the hashes and at least one space after the hashes\n    before the subtitle\n-   Skip a line and click the insert new code menu (a green box with a C\n    and a plus sign) then choose <if>R</if>\n\nYour Markdown document should now look something like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R chunk](images/reports/new-chunk.png){#fig-new-chunk fig-align='center' width=100%}\n:::\n:::\n\n\n### Code chunks {#sec-code-chunks}\n\nWhat you have created is a subtitle and a **code chunk**. In R Markdown,\nanything written in a grey code chunk is assumed to be code, and\nanything written in the white space (between the code chunks) is\nregarded as normal text (the actual colours will depend on which theme\nyou have applied, but we will refer to the default white and grey). This\nmakes it easy to combine both text and code in one document.\n\n::: callout-caution\n## Code chunk errors\n\nWhen you create a new code chunk you should notice that the grey box\nstarts and ends with three back ticks \\`\\`\\`. One common mistake is to\naccidentally delete these back ticks. Remember, code chunks and text\nentry are different colours - if the colour of certain parts of your\nMarkdown doesn't look right, check that you haven't deleted the back\nticks.\n:::\n\nIn your code chunk, write the code you created in @sec-objects.\n\n\n::: {.cell layout-align=\"center\" filename='important_info.Rmd'}\n\n```{.r .cell-code}\nname <- \"Olivia\"\nage <- 24\ntoday <- Sys.Date()\nchristmas <- as.Date(\"2024-12-25\")\n```\n:::\n\n\n::: callout-note\n## Console vs Scripts\n\nIn @sec-intro, we asked you to type code into the console. Now, we want\nyou to put code into code chunks in R Markdown files to make the code\nreproducible. This way, you can re-run your code any time the data\nchanges to update the report, and you or others can inspect the code to\nidentify and fix any errors.\n\nHowever, there will still be times that you need to put code in the\nconsole instead of in a script, such as when you install a new package.\nIn this book, code chunks will be labelled with whether you should run\nthem in the console or add the code to a script.\n:::\n\n### Running code\n\nWhen you're working in an R Markdown document, there are several ways to\nrun your lines of code.\n\nFirst, you can highlight the code you want to run and then click <if>Run\n\\> Run Selected Line(s)</if>, however this is tedious and can cause\nproblems if you don't highlight *exactly* the code you want to run.\n\nAlternatively, you can press the green \"play\" button at the top-right of\nthe code chunk and this will run **all** lines of code in that chunk.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Click the green arrow to run all the code in the chunk.](images/reports/run-all.png){#fig-run-all fig-align='center' width=100%}\n:::\n:::\n\n\nEven better is to learn some of the keyboard short cuts for R Studio. To\nrun a single line of code, make sure that the cursor is in the line of\ncode you want to run (it can be anywhere) and press <pc>Ctrl+Enter</pc>\nor <mac>Cmd+Enter</mac>. If you want to run all of the code in the code\nchunk, press <pc>Ctrl+Shift+Enter</pc> or <mac>Cmd+Shift+Enter</mac>.\nLearn these short cuts; they will make your life easier!\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Use the keyboard shortcut to run only highlighted code, or run one line at a time by placing the cursor on a line without highlighting anything.](images/reports/run3.gif){#fig-run3 fig-align='center' width=100%}\n:::\n:::\n\n\nRun your code using each of the methods above. You should see the\nvariables `name`, `age`, `today`, and `christmas` appear in the\nenvironment pane. (Restart R to reset.)\n\n### Inline code {#sec-rmd-inline-r}\n\nWe keep talking about using R Markdown for reproducible reports, but\nit's easier to show you than tell you why this is so powerful and to\ngive you an insight into how this course will (hopefully!) change the\nway you work with data forever!\n\nOne important feature of R Markdown is that you can combine text and\ncode to insert values into your writing using **inline coding**. If\nyou've ever had to copy and paste a value or text from one file to\nanother, you'll know how easy it can be to make mistakes. Inline code\navoids this. Again it's easier to show you what inline code does rather\nthan to explain it so let's have a go.\n\nFirst, copy and paste this text to the **white space underneath** your\ncode chunk. If you used a different variable name than `christmas`, you\nshould update this with the name of the object you created, but\notherwise don't change anything else.\n\n\n\n```{.md}\nMy name is `r name` and I am `r age` years old. \nIt is `r christmas - today` days until Christmas, \nwhich is my favourite holiday.\n```\n\n\n::: callout-caution\n## Displaying Plots\n\nYou cannot display a plot using inline R. Plots should be displayed from\ncode chunks. We'll come back to how to do this soon.\n:::\n\n### Knitting your file {#sec-rmd-knit}\n\nNow we are going to <a href='https://psyteachr.github.io/glossary/k#knit' target='_blank' class='glossary' title='To create an HTML, PDF, or Word document from an R Markdown (Rmd) document'>knit</a>, or compile, the file into a\ndocument type of our choosing. In this case we'll create a default html\nfile, but you will learn how to create other files like Word and PDF\nthroughout this course. To knit your file, click <if>Knit \\> Knit to\nHMTL</if>.\n\nR Markdown will create and display a new HTML document, but it will also\nautomatically save this file in your working directory.\n\nAs if by magic, that slightly odd bit of text you copied and pasted now\nappears as a normal sentence with the values pulled in from the objects\nyou created.\n\n> My name is Olivia and I am 24 years old. It is\n> -61 days until Christmas, which is my favourite\n> holiday.\n\n::: {.callout-note collapse=\"true\"}\n## Knitting with Code\n\nYou can also knit by typing the following code into the console. Never\nput this in an Rmd script itself, or it will try to knit itself in an\ninfinite loop.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\nrmarkdown::render(\"important_info.Rmd\")\n\n# alternatively, you can use this, but may get a warning\nknitr::knit2html(\"important_info.Rmd\")\n```\n:::\n\n:::\n\n## Loading data\n\nNow let's try another example of using Markdown, but this time rather\nthan using objects we have created from scratch, we will read in a data\nfile.\n\nSave and close your `important_info.Rmd` document. Then open and save a\nnew Markdown document, this time named `hockey_data.Rmd`. You can again\nget rid of everything after the setup chunk. Add `library(tidyverse)` to\nthe setup chunk so that tidyverse functions are available to your\nscript.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(tidyverse)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n### Online sources {#sec-loading-online}\n\nFirst, let's try loading data that is stored online. Create a code chunk\nin your document and copy, paste, and run the below code. This code\nloads some National Hockey League (NHL) draft data.\n\n-   The data is stored in a `.csv` file so we're going to use the\n    `read_csv()` function to load it in.\n-   Note that the url is contained within double quotation marks - it\n    won't work without this.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nhockey_online <- read_csv(\"https://healthteachr.github.io/data/nhldraft.csv\")\n```\n:::\n\n\n::: callout-warning\n## Could not find function\n\nIf you get an error message that looks like:\n\n> Error in\n> read_csv(\"https://healthteachr.github.io/data/nhldraft.csv\") :\\\n> could not find function \"read_csv\"\n\nThis means that you have not loaded tidyverse. Check that\n`library(tidyverse)` is in the setup chunk and that you have run the\nsetup chunk.\n:::\n\nThis dataset includes a wide range of performance data from every player\ndrafted in the NHL Draft from 1963 to 2022 (originally from\n[Kaggle](https://www.kaggle.com/datasets/mattop/nhl-draft-hockey-player-data-1963-2022))\nwhere each line of data is a single player. There are multiple ways to\nview and check a dataset in R. Do each of the following and make a note\nof what information each approach seems to give you. If you'd like more\ninformation about each of these functions, you can look up the help\ndocumentation with `?function`:\n\n-   Click on the `hockey_online` object in the environment pane\n-   Run `head(hockey_online)` in the console\n-   Run `summary(hockey_online)` in the console\n-   Run `str(hockey_online)` in the console\n-   Run `View(hockey_online)` in the console\n\n### Local data files\n\nMore commonly, you will be working from data files that are stored\nlocally on your computer. But where should you put all of your files?\nYou usually want to have all your scripts and data files for a single\nproject inside one folder on your computer, that project's\n<a href='https://psyteachr.github.io/glossary/w#working-directory' target='_blank' class='glossary' title='The filepath where R is currently reading and writing files.'>working directory</a>, and we have already set up the main\ndirectory <code class='path'>02-reports</code>for this chapter.\n\nYou can organise files in subdirectories inside this main project\ndirectory, such as putting all raw data files in a subdirectory called\n<code class='path'>data</code> and saving any image files to a subdirectory called\n<code class='path'>images</code>. Using subdirectories helps avoid one single folder\nbecoming too cluttered, which is important if you're working on big\nprojects.\n\nIn your <code class='path'>02-reports</code> directory, create a new folder named\n<code class='path'>data</code>, [download a copy of the hockey data\nfile](https://healthteachr.github.io/data/nhldraft.csv){download=\"\"},\nand save it in this new subdirectory.\n\nTo load in data from a local file, again we can use the `read_csv()`\nfunction, but this time rather than specifying a url, give it the\nsubdirectory and file name.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nhockey_local <- read_csv(\"data/nhldraft.csv\")\n```\n:::\n\n\n::: callout-tip\n## Tab-autocomplete file names\n\nUse tab auto-complete when typing file names in a code chunk. After you\ntype the first quote, hit tab to see a drop-down menu of the files in\nyour working directory. You can start typing the name of the\nsubdirectory or file to narrow it down. This is really useful for\navoiding annoying errors because of typos or files not being where you\nexpect.\n:::\n\nThings to note:\n\n-   You must include the file extension (in this case `.csv`)\n-   The subdirectory folder name (`data`) and the file name are\n    separated by a forward slash `/`\n-   Precision is important, if you have a typo in the file name it won't\n    be able to find your file; remember that R is case sensitive -\n    `Hockey_Data.csv` is a completely different file to\n    `hockey_data.csv` as far as R is concerned.\n\n::: {.callout-note .try}\n## View hockey_local\n\nRun `head()`, `summary()`, `str()`, and `View()` on `hockey_local` to\nconfirm that the data is the same as `hockey_online`.\n:::\n\n## Writing a report\n\nWe're going to write a basic report for this hockey dataset using R\nMarkdown to show you some of the features. We'll be expanding on almost\nevery bit of what we're about to show you throughout this course; the\nmost important outcome is that you start to get comfortable with how R\nMarkdown works and what you can use it to do.\n\n### Data analysis\n\nFor this report we're just going to present some simple NHL Draft stats\nfor three player positions: Left Wing (LW), Centre (C), and Defenseman\n(D). We'll come back to how to write this kind of code yourself in\n@sec-summary. For now, see if you can follow the logic of what the code\nis doing via the code comments.\n\nCreate a new code chunk, then copy, paste and run the following code and\nthen view `hockey_counts` by clicking on the object in the environment\npane. Note that it doesn't really matter whether you use `hockey_local`\nor `hockey_online` in the first line as they're identical.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\n# keep only the data from the first overall picks where Left Wings, Centres, or Defensemen were drafted\nhockey_pos <- filter(hockey_online, overall_pick==1 &\n         position %in% c(\"LW\", \"C\", \"D\"))\n\n# replace the abbreviated player position values with the full player position values\nhockey_pos$position[hockey_pos$position == 'LW'] <- 'Left Wing'\nhockey_pos$position[hockey_pos$position == 'C'] <- 'Centre'\nhockey_pos$position[hockey_pos$position == 'D'] <- 'Defenseman'\n\n# count the number of overall first picks for each position\nhockey_counts <-count(hockey_pos, position)\n```\n:::\n\n\nBecause each row of the dataset is a player, this code gives us a nice\nand easy way of seeing how many players were drafted first (between 1963\nand 2022) for each type of position; it just counts the number of rows\nin each group.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|position   |  n|\n|:----------|--:|\n|Centre     | 24|\n|Defenseman | 15|\n|Left Wing  |  8|\n\n</div>\n:::\n:::\n\n\n::: callout-note\nJust putting an object by itself on a line \"prints\" it. @sec-rmd-tables\nwill show you how to print the table in different formats for your\nreport.\n:::\n\n### Text formatting {#sec-markdown}\n\nYou can use the visual <a href='https://psyteachr.github.io/glossary/m#markdown' target='_blank' class='glossary' title='A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.'>markdown</a> editor if you have\nRStudio version 1.4 or higher. This will be a button at the top of the\nsource pane and the menu options should be very familiar to anyone who\nhas worked with software like Microsoft Word.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The visual editor.](images/reports/visual-editor.png){#fig-visual-editor fig-align='center' width=100%}\n:::\n:::\n\n\nThis is useful for complex styling, but you can also use these common\nplain-text style markups:\n\n-   Headers are created by prefacing subtitles with one or more hashes\n    (`#`) and a space (do not exclude the space). If you include a table\n    of contents, this will be created from your document headers.\n-   Format text with *italics* or **bold** by surrounding the text with\n    one or two asterisks or underscores.\n-   Make lists using numbers, asterisks or dashes before items. Indent\n    items to make nested lists.\n-   Make links like this:\n    `[HealthTeachR](https://healthteachr.github.io/)`\n-   Download the [R Markdown Cheat\n    Sheet](https://www.rstudio.org/links/r_markdown_cheat_sheet) to\n    learn more.\n\nCopy and paste the below text into the white space below the code chunk\nthat loads in the data. Save the file and then click knit to view the\nresults. It will look a bit messy for now as it contains the code and\nmessages from loading the data but don't worry, we'll get rid of that\nsoon.\n\n\n\n```{.md}\n## Hockey report\n\nThis report summarises the first overall pick data for different types of player position between 1963 and 2022. This data is from [Kaggle](https://www.kaggle.com/datasets/mattop/nhl-draft-hockey-player-data-1963-2022).\n\n### First overall picks by position\n\nThe *total* number of **Left Wings** drafted first was `r hockey_counts$n[3]`\n\nThe *total* number of **Centres** drafted first was `r hockey_counts$n[1]`.\n```\n\n\n::: callout-warning\nThe example markdown above (and in the rest of this book) is shown for\nthe regular editor, not the visual editor. In the visual editor, you\nwon't see the hashes that create headers, or the asterisks that create\nbold and italic text. You also won't see the backticks that demarcate\ninline code.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The example code above shown in the visual editor.](images/reports/visual-editor-example.png){fig-align='center' width=100%}\n:::\n:::\n\n\nIf you try to add the hashes, asterisks and backticks to the visual\neditor, you will get frustrated as they disappear. If you succeed, your\ncode in the regular editor will look mangled like this:\n\n\n\n```{.md}\n\\#\\#\\# First overall picks by position\n\nThe \\*total\\* number of \\*\\*Left Wings\\*\\* drafted first was \\`r hockey_counts\\$n\\[3]\\`\n```\n\n:::\n\nTry and match up the inline code with what is in the `hockey_counts`\ntable. Of note:\n\n-   The `$` sign is used to indicate specific variables (or columns) in\n    an object using the `object$variable` syntax.\n-   Square brackets with a number e.g., `[3]` indicate a particular\n    observation\n-   So `hockey_counts$n[3]` asks the inline code to display the third\n    observation of the variable `n` in the dataset `hockey_online`.\n\n::: {.callout-note .try}\n## Further Practice\n\nAdd another line that reports the total numbers of **Defensemen** using\ninline code. Using either the visual editor or text markups, add in bold\nand italics so that it matches the others.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n\n\n```{.md}\nThe *total* number of **Defensemen** drafted first was `r hockey_counts$n[2]`.\n```\n\n\n\n</div>\n\n:::\n\n### Code comments {#sec-comments}\n\nIn the above code we've used code **comments** and it's important to\nhighlight how useful these are. You can add comments inside R chunks\nwith the hash symbol (`#`). R will ignore characters from the hash to\nthe end of the line.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# important numbers\n\nn <- nrow(hockey_online) # the total number of players (number of rows)\nfirst <- min(hockey_online$year) # the first (minimum) year\nlast <- max(hockey_online$year) # the last (maximum) year\n```\n:::\n\n\nIt's usually good practice to start a code chunk with a comment that\nexplains what you're doing there, especially if the code is not\nexplained in the text of the report.\n\nIf you name your objects clearly, you often don't need to add clarifying\ncomments. For example, if I'd named the three objects above\n`total_number_of_players`, `first_year` and `last_year`, I would omit\nthe comments. It's a bit of an art to comment your code well, but try to\nadd comments as you're working through this book - it will help\nconsolidate your learning and when future you comes to review your code,\nyou'll thank past you for being so clear.\n\n### Images {#sec-rmd-images}\n\nAs the saying goes, a picture paints a thousand words and sometimes you\nwill want to communicate your data using visualisations.\n\nCreate a code chunk to display a graph of the data in your document\nafter the text we've written so far. We'll use some code that you'll\nlearn more about in @sec-viz to make a simple bar chart that represents\nthe hockey data -- focus on trying to follow how bits of the code map on\nto the plot that is created.\n\nCopy and paste the below code. Run the code in your Markdown to see the\nplot it creates and then knit the file to see how it is displayed in\nyour document.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nggplot(data = hockey_counts, \n       mapping = aes(x = position, \n                     y = n, \n                     fill = position)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Player position\",\n       y = \"Number of overall first picks\",\n       title = \"Overall first picks in the NHL Draft by player position\",\n       subtitle = \"1963 - 2022\")\n```\n\n::: {.cell-output-display}\n![](02-reports_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nYou can also include images that you did not create in R using the\nmarkdown syntax for images or `knitr::include_graphics()`. This is very\nsimilar to loading data in that you can either use an image that is\nstored on your computer, or via a url.\n\nCreate a new code chunk underneath each of the NHL Draft figures for\nLeft Wings, Centres, and Defensemen and add in an image from Google or\nWikipedia for each (right click on an image and select copy image\naddress to get a url). See the section on [chunk defaults](#rmd-setup)\nto see how to change the display size.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Wayne_Gretzky_New_York_Rangers_%28252547547%29.jpg/440px-Wayne_Gretzky_New_York_Rangers_%28252547547%29.jpg\")\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## Image Licenses\n\nMost images on Wikipedia are public domain or have an open license. You\ncan search for images by license on Google Images by clicking on the\n<if>Tools</if> button and choosing \"Creative Commons licenses\" from the\n\"Usage Rights\" menu.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/reports/google-images.png){fig-align='center' fig-alt='Screenshot of Google Images interface with Usage Rights selections open.' width=100%}\n:::\n:::\n\n:::\n\nAlternatively, you can use the markdown notation `![caption](url)` to\nshow an image. This goes in the markdown text section of the document,\nnot inside is grey code block. The caption is optional; you can omit it\nlike this:\n\n`![](images/reports/google-images.png)`\n\n### Tables {#sec-rmd-tables}\n\nRather than a figure, we might want to display our data in a table.\n\n-   Add a new level 2 heading (two hashtags) to your document, name the\n    heading \"Data in table form\" and then create a new code chunk below\n    this.\n\nFirst, let's see what the table looks like if we don't make any edits.\nSimply write the name of the table you want to display in the code chunk\n(in our case `hockey_counts`) and then click knit to see what it looks\nlike.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nhockey_counts\n```\n:::\n\n\n```         \n## # A tibble: 3 × 2\n## # Groups:   position [3]\n##   position         n\n##   <chr>        <int>\n## 1 Centre         24\n## 2 Defenseman     15\n## 3 Left Wing      8\n```\n\nIt's just about readable but it's not great.\n\nAnother way to customise tables uses the function `kable()` from the\n`kableExtra` package.\n\nAmend your code to load the `kableExtra` package and apply the `kable()`\nfunction to the table. Once you've done this, knit the file again to see\nthe output.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nlibrary(kableExtra) # for table display\n\nkable(hockey_counts) # apply the kable function\n```\n\n::: {.cell-output-display}\n\n\n|position   |  n|\n|:----------|--:|\n|Centre     | 24|\n|Defenseman | 15|\n|Left Wing  |  8|\n\n\n:::\n:::\n\n\nIt's better, but it's still not amazing. So let's make a few\nadjustments. We can change the names of the columns, add a caption, and\nalso change the alignment of the cell contents using arguments to\n`kable()`.\n\nWe can also add a theme to change the overall style. In this example\nwe've used `kable_classic` but there are 5 others: `kable_paper`,\n`kable_classic_2`, `kable_minimal`, `kable_material` and\n`kable_material_dark`. Try them all and see which one you prefer.\n\nFinally, we can change the formatting of the first row using `row_spec`.\nLook up the help documentation for `row_spec` to see what other options\nare available. Try changing the value of any of the arguments below to\nfigure out what they do.\n\n\n::: {.cell layout-align=\"center\" filename='hockey_data.Rmd'}\n\n```{.r .cell-code}\nk <- kable(hockey_counts, \n      col.names = c(\"Player position\", \"First overall picks\"),\n      caption = \"Overall first picks in the NHL Draft by player position.\", \n      align = \"c\")\nk_style <- kable_classic(k, full_width = FALSE) \nk_highlighted <- row_spec(k_style, row = 0, bold = TRUE, color = \"red\") \n\nk_highlighted\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n<caption>Overall first picks in the NHL Draft by player position.</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:center;font-weight: bold;color: red !important;\"> Player position </th>\n   <th style=\"text-align:center;font-weight: bold;color: red !important;\"> First overall picks </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Centre </td>\n   <td style=\"text-align:center;\"> 24 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Defenseman </td>\n   <td style=\"text-align:center;\"> 15 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Left Wing </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n::: callout-note\n## Caption placement\n\nThe appearance and placement of the table caption depends on the type of\ndocument you are creating. Your captions may look different to those in\nthis book because you are creating a single-page `html_document`, while\nthis book uses the `html` style from [quarto](https://quarto.org/),\nwhich is a newer alternative to R Markdown. You'll learn more about\nother document output types in @sec-custom-reports.\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Advanced table customisation\n\nIf you're feeling confident with what we have covered so far, the\n[kableExtra\nvignette](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html){target=\"_blank\"}\ngives a lot more detail on how you can edit your tables using\n`kableExtra`.\n\nYou can also explore the [gt](https://gt.rstudio.com/){target=\"_blank\"}\npackage, which is complex, but allows you to create beautiful customised\ntables. [Riding tables with {gt} and\n{gtExtras}](https://bjnnowak.netlify.app/2021/10/04/r-beautiful-tables-with-gt-and-gtextras/){target=\"_blank\"}\nis an outstanding tutorial.\n:::\n\n## Refining your report\n\n### Chunk defaults {#sec-rmd-setup}\n\nLet's finish by tidying up the report and organising our code a bit\nbetter. When you create a new R Markdown file in RStudio, a setup chunk\nis automatically created - we've mostly ignored this chunk until now.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nYou can set more default options for your document here. Type the\nfollowing code into the console to see the full list of options that you\ncan set and their default values. However, the most useful and common\noptions to change for the purposes of writing reports revolve around\nwhether you want to show your code and the size of your images.\n\n\n::: {.cell layout-align=\"center\" filename='Run in the console'}\n\n```{.r .cell-code}\n# list option default values\nstr(knitr::opts_chunk$get())\n```\n:::\n\n\nReplace the code in your setup chunk with the below code and then try\nchanging each option from `FALSE` to `TRUE` and changing the numeric\nvalues then knit the file again to see the difference it makes.\n\n\n::: {.cell layout-align=\"center\" verbatim='r setup, include=FALSE' filename='hockey_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r setup, include=FALSE}</code></pre>\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  echo       = FALSE, # whether to show code chunks\n  message    = FALSE, # whether to show messages from your code\n  warning    = FALSE, # whether to show warnings from your code\n  fig.width  = 8,     # figure width in inches (at 96 dpi)\n  fig.height = 5,     # figure height in inches (at 96 dpi)\n  out.width = \"50%\"   # figures/images span 50% of the page width\n)\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n::: {.callout-warning collapse=\"true\"}\n## Figure versus output dimensions\n\nNote that `fig.width` and `fig.height` control the original size and\naspect ratio of images generated by R, such as plots. This will affect\nthe relative size of text and other elements in plots. It does not\naffect the size of existing images at all. However, `out.width` controls\nthe **display** size of both existing images and figures generated by R.\nThis is usually set as a percentage of the page width.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A plot with the default values of fig.width = 8, fig.height = 5, out.width = \"100%\"](02-reports_files/figure-html/fig-full-100-1.png){#fig-full-100 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The same plot with half the default width and height: fig.width = 4, fig.height = 2.5, out.width = \"100%\"](02-reports_files/figure-html/fig-half-100-1.png){#fig-half-100 fig-align='center' width=100%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The same plot as above at half the output width: fig.width = 4, fig.height = 2.5, out.width = \"50%\"](02-reports_files/figure-html/fig-half-50-1.png){#fig-half-50 fig-align='center' width=50%}\n:::\n:::\n\n:::\n\n### Override defaults\n\nThese setup options change the behaviour for the entire document,\nhowever, you can override the behaviour for individual code chunks.\n\nFor example, by default you might want to hide your code but there also\nmight be an occasion where you want to show the code you used to analyse\nyour data. You can set `echo = FALSE` in your setup chunk to make hiding\ncode the default but in the individual code chunk for your plot set\n`echo = TRUE`. Try this now and knit the file to see the results.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, echo = TRUE' filename='hockey_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, echo = TRUE}</code></pre>\n\n```{.r .cell-code}\nggplot(data = hockey_counts, \n       mapping = aes(x = position, \n                     y = n, \n                     fill = position)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Player position\",\n       y = \"Number of overall first picks\",\n       title = \"Overall first picks in the NHL Draft by player position\",\n       subtitle = \"1963 - 2022\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\nAdditionally, you can also override the default image display size or\ndimensions.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, out.width=\\'25%\\''}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, out.width='25%'}</code></pre>\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Wayne_Gretzky_New_York_Rangers_%28252547547%29.jpg/440px-Wayne_Gretzky_New_York_Rangers_%28252547547%29.jpg\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n::: {.cell layout-align=\"center\" verbatim='r, fig.width = 10, fig.height = 20' filename='hockey_data.Rmd'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, fig.width = 10, fig.height = 20}</code></pre>\n\n```{.r .cell-code}\nggplot(data = hockey_counts, \n       mapping = aes(x = position, y = n, fill = position)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) +\n  labs(x = \"Player position\",\n       y = \"Number of overall first picks\",\n       title = \"Overall first picks in the NHL Draft by player position\",\n       subtitle = \"1963 - 2022\")\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n### Loading packages\n\nYou should add the packages you need in your setup chunk using\n`library()`. Often when you are working on a script, you will realize\nthat you need to load another add-on package. Don't bury the call to\n`library(package_I_need)` way down in the script. Put it in the setup\nchunk so the user has an overview of what packages are needed.\n\n::: {.callout-note .try}\n## Move library calls to the setup chunk\n\nMove the code that loads the `tidyverse` and `kableExtra` to the setup\nchunk.\n:::\n\n### YAML header {#sec-yaml}\n\nFinally, the <a href='https://psyteachr.github.io/glossary/y#yaml' target='_blank' class='glossary' title='A structured format for information'>YAML</a> header is the bit at the very top of\nyour Markdown document. You can set several options here as well.\n\n```         \n---\ntitle: \"Hockey Data Report\"\nauthor: \"Your name\"\noutput:\n  html_document:\n    df_print: paged\n    theme: \n      version: 4\n      bootswatch: yeti\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    toc_depth: 3\n    number_sections: false\n---\n```\n\n::: callout-note\n## Try\n\nTry changing the values from `false` to `true` to see what the options\ndo.\n:::\n\nThe `df_print: paged` option prints data frames using\n`rmarkdown::paged_table()` automatically. You can use `df_print: kable`\nto default to the simple kable style, but you will need the code from\n@sec-rmd-tables for more complex tables with kableExtra.\n\nThe built-in bootswatch themes are: default, cerulean, cosmo, darkly,\nflatly, journal, lumen, paper, readable, sandstone, simplex, spacelab,\nunited, and yeti. You can [view and download more\nthemes](https://bootswatch.com/4/). Try changing the theme to see which\none you like best.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Light themes in versions 3 and 4.](images/reports/bootswatch.png){#fig-bootswatch fig-align='center' width=100%}\n:::\n:::\n\n\n::: callout-warning\n## YAML formatting\n\nYAML headers can be very picky about spaces and semicolons (the rest of\nR Markdown is much more forgiving). For example, if you put a space\nbefore \"author\", you will get an error that looks like:\n\n```         \nError in yaml::yaml.load(..., eval.expr = TRUE) : \n  Parser error: while parsing a block mapping at line 1, \n  column 1 did not find expected key at line 2, column 2\n```\n\nThe error message will tell you exactly where the problem is (the second\ncharacter of the second line of the YAML header), and it's usually a\nmatter of fixing typos or making sure that the indenting is exactly\nright.\n:::\n\n### Table of Contents {#sec-toc}\n\nThe table of contents is created by setting `toc: true`. It will be\ndisplayed at the top of your document unless you set `toc_float: true`\nor include `toc_float:` with its options `collapsed` and `smooth_scroll`\n(options for a setting are indented under it).\n\n```         \n---\noutput:\n  html_document:\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    toc_depth: 3\n---\n```\n\nThis will use the markdown header structure to create the table of\ncontents. `toc_depth: 3` means that the table of contents will only\ndisplay headers up to level 3 (i.e., those that start with three hashes:\n`###`). Add `{-}` after the header title to remove it from the table of\ncontents (e.g., `### Overview {-}`).\n\n::: callout-caution\n## Malformated ToC\n\nIf your table of contents isn't showing up correctly, this probably\nmeans that your headers are not set up right. Make sure that headers\nhave no spaces before the hashes and at least one space after the\nhashes. For example, `##Analysis` won't display as a header and be added\nto the table of contents, but `## Analysis` will.\n:::\n\n### Formats\n\nSo far we've just knitted to html. To generate PDF reports, you need to\ninstall <pkg>tinytex</pkg> [@R-tinytex] and run the following code in\nthe console (do **not** add this to your Rmd file):\n\n\n::: {.cell layout-align=\"center\" filname='Run in the console'}\n\n```{.r .cell-code}\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()\n```\n:::\n\n\nOnce you've done this, update your YAML heading to add a `pdf_document`\nsection and knit a PDF document. The options for PDFs are more limited\nthan for HTML documents, so if you just replace `html_document` with\n`pdf_document`, you may need to remove some options, such as `toc_float`\nif you get an error that looks like \"Functions that produce HTML output\nfound in document targeting PDF output.\"\n\n```         \n---\noutput:\n  pdf_document:\n    toc: TRUE\n  html_document:\n    toc: TRUE\n    toc_float: TRUE\n---\n```\n\nAs an alternative, you can also knit to a Word document. When you click\nthe **`Knit`** button, the first format will knit by default, but you\ncan use the drop-down menu under the Knit button to choose another\nformat.\n\n```         \n---\noutput:\n  pdf_document:\n    toc: TRUE\n  html_document:\n    toc: TRUE\n    toc_float: TRUE\n  word_document:\n    toc: TRUE\n---\n```\n\n::: callout-warning\n## Knitting errors\n\nIf you encounter errors, ask on Teams for help - knitting to PDF or Word\ncan be tricky.\n:::\n\n### Summary {#sec-reports-summary}\n\nThis chapter has covered a lot but hopefully now you have a much better\nidea of what Markdown is able to do. Whilst working in Markdown takes\nlonger in the initial set-up stage, once you have a fully reproducible\nreport you can plug in new data each week or month and simply click\nknit, reducing duplication of effort, and the human error that comes\nwith it.\n\nYou can access a [working R Markdown\nfile](demos/hockey_data.Rmd){download=\"important_info.Rmd\"} with the\ncode from the example above to compare to your own code.\n\nAs you continue to work through the book you will learn how to wrangle\nand analyse your data and how to use Markdown to present it. We'll\nslowly build on the available customisation options so over the course\nof next few weeks, you'll find your Markdown reports start to look more\npolished and professional.\n\n## Exercises {#sec-exercises-reports}\n\nBelow are some additional exercises that will let you apply what you\nhave learned in this chapter. We would suggest taking a break before you\ndo these - it might feel slightly more effortful, but spreading out your\npractice will help you learn more in the long run.\n\n### New project {#sec-exercises-reports-project}\n\nCreate a new project called \"demo_report\" ([@sec-projects]).\n\n### New script {#sec-exercises-reports-setup}\n\nIn the \"demo_report\" project, create a new Rmarkdown document called\n\"job.Rmd\" ([@sec-rmarkdown]). Edit the YAML header to output tables\nusing kable and set a custom theme ([@sec-yaml]).\n\n\n<div class='webex-solution'><button>Solution</button>\n --- title: \"My Job\" author: \"Me\" output: html_document:\ndf_print: kable theme: version: 4 bootswatch: sandstone --- \n</div>\n\n\n### R Markdown {#sec-exercises-reports-rmarkdown}\n\nWrite a short paragraph describing your job or a job you might like to\nhave in the future ([@sec-markdown]). Include a bullet-point list of\nlinks to websites that are useful for that job ([@sec-markdown]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n```         \nI am a research health psychologist who is interested in open science \nand teaching computational skills.\n\n* [HealthTeachR books](https://healthteachr.github.io/)\n* [Google Scholar](https://scholar.google.com/)\n```\n\n\n</div>\n\n\n### Tables {#sec-exercises-reports-tables}\n\nUse the following code to load a small table of tasks\n([@sec-code-chunks]). Edit it to be relevant to your job (you can change\nthe categories entirely if you want).\n\n\n::: {.cell layout-align=\"center\" filename='job.Rmd'}\n\n```{.r .cell-code}\ntasks <- tibble::tribble(\n  ~task,                         ~category,   ~frequency,\n  \"Debrief with players\",        \"coaching\",  \"daily\",\n  \"Create a training schedule\",  \"coaching\",  \"weekly\",\n  \"Make the performance report\", \"reporting\", \"monthly\"\n)\n```\n:::\n\n\nFigure out how to make it so that code chunks don't show in your knitted\ndocument ([@sec-rmd-setup]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nYou can set the default to `echo = FALSE` in the setup chunk at the top\nof the script.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = FALSE)\n```\n:::\n\n\nTo set visibility for a specific code chunk, put `echo = FALSE` inside\nthe curly brackets.\n\n\n::: {.cell layout-align=\"center\" verbatim='r, echo=FALSE'}\n<div class='verbatim'><pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;{r, echo=FALSE}</code></pre>\n\n```{.r .cell-code}\n# code to hide\n```\n\n<pre class='sourceCode r'><code class='sourceCode R'>&#96;&#96;&#96;</code></pre></div>\n:::\n\n\n\n</div>\n\n\nDisplay the table with purple italic column headers. Try different\nstyles using <pkg>kableExtra</pkg> ([@sec-rmd-tables]).\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nk <- kableExtra::kable(tasks)\nk_style <- kableExtra::kable_minimal(k)\nk_highlight <- kableExtra::row_spec(k_style,\n                                    row = 0, \n                                    italic = TRUE, \n                                    color = \"purple\")\nk_highlight\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> task </th>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> category </th>\n   <th style=\"text-align:left;font-style: italic;color: purple !important;\"> frequency </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Debrief with players </td>\n   <td style=\"text-align:left;\"> coaching </td>\n   <td style=\"text-align:left;\"> daily </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Create a training schedule </td>\n   <td style=\"text-align:left;\"> coaching </td>\n   <td style=\"text-align:left;\"> weekly </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Make the performance report </td>\n   <td style=\"text-align:left;\"> reporting </td>\n   <td style=\"text-align:left;\"> monthly </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n:::\n:::\n\n\n### Images {#sec-exercises-reports-images}\n\nAdd an image of anything relevant ([@sec-rmd-images]).\n\n\n::: {.cell layout-align=\"center\" webex.hide='true'}\n::: {.callout-note collapse='true'}\n## Solution\n\n```{.r .cell-code}\nknitr::include_graphics(\"https://healthteachr.github.io/images/logos/logo.png\")\n```\n\n::: {.cell-output-display}\n![](https://healthteachr.github.io/images/logos/logo.png){fig-align='center' width=100%}\n:::\n\n:::\n:::\n\n\n\n<div class='webex-solution'><button>Alternative Solution</button>\n\n\nYou can add an image from the web using its URL:\n\n```         \n![Applied Data Skills](https://healthteachr.github.io/images/logos/logo.png)\n```\n\nOr save an image into your project directory (e.g., in the images\nfolder) and add it using the relative path:\n\n```         \n![Applied Data Skills](images/logos/logo.png)\n```\n\n\n</div>\n\n\n### Inline R {#sec-exercises-reports-inline}\n\nUse inline R to include the version of R you are using in the following\nsentence: \"This report was created using R version 4.4.1 (2024-06-14 ucrt).\" You can\nget the version using the object `R.version.string`\n([@sec-rmd-inline-r]).\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\nThis report was created using `` R version 4.4.1 (2024-06-14 ucrt) ``.\n\n\n</div>\n\n\n### Knit {#sec-exercises-reports-knit}\n\nKnit this document to html ([@sec-rmd-knit]).\n\n\n<div class='webex-solution'><button>Solution</button>\n Click on the knit button or run the following code in the\nconsole. (Do not put it the Rmd script!)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmarkdown::render(\"job.Rmd\")\n```\n:::\n\n\n\n</div>\n\n\n## Glossary {#sec-glossary-reports}\n\n\n::: {.cell layout-align=\"center\"}\n\n|term              |definition                                                                                                                                                       |\n|:-----------------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|directory         |A collection or \"folder\" of files on a computer.                                                                                                                 |\n|extension         |The end part of a file name that tells you what type of file it is (e.g., .R or .Rmd).                                                                           |\n|knit              |To create an HTML, PDF, or Word document from an R Markdown (Rmd) document                                                                                       |\n|markdown          |A way to specify formatting, such as headers, paragraphs, lists, bolding, and links.                                                                             |\n|project           |A way to organise related files in RStudio                                                                                                                       |\n|R Markdown        |The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code. |\n|script            |A plain-text file that contains commands in a coding language, such as R.                                                                                        |\n|working directory |The filepath where R is currently reading and writing files.                                                                                                     |\n|YAML              |A structured format for information                                                                                                                              |\n:::\n\n\n## Further Resources {#sec-resources-reports}\n\n-   [R Markdown Cheat\n    Sheet](https://www.rstudio.org/links/r_markdown_cheat_sheet) <!--\n    -   [R Markdown reference Guide](https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf)\n    -->\n-   [R Markdown Tutorial](https://rmarkdown.rstudio.com/lesson-1.html)\n-   [R Markdown: The Definitive\n    Guide](https://bookdown.org/yihui/rmarkdown/) by Yihui Xie, J. J.\n    Allaire, & Garrett Grolemund\n-   [Chapter 27: R Markdown](https://r4ds.had.co.nz/r-markdown.html) of\n    *R for Data Science*\n-   [Project Structure](https://slides.djnavarro.net/project-structure/)\n    by Danielle Navarro\n-   [How to name\n    files](https://speakerdeck.com/jennybc/how-to-name-files) by Jenny\n    Bryan\n-   [kableExtra](https://haozhu233.github.io/kableExtra/awesome_table_in_html.html)\n-   [gt](https://gt.rstudio.com/)\n",
    "supporting": [
      "02-reports_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}